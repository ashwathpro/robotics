
FirstIP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ba  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  000000ba  0000014e  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  0000014e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000014e  2**0
                  CONTENTS
  5 .stab         00000810  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000778  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	10 c0       	rjmp	.+32     	; 0x7a <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <USART_Init>:
 DELAY_tIME for much time should the motor
 be on if one Char is received */

void USART_Init( unsigned int baud )
{
  5c:	9c 01       	movw	r18, r24
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  5e:	83 2f       	mov	r24, r19
  60:	99 27       	eor	r25, r25
  62:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char)baud;
  64:	29 b9       	out	0x09, r18	; 9
	
	/* Enable Receiver and Transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 bd       	out	0x20, r24	; 32
  6e:	08 95       	ret

00000070 <USART_Receive>:
}



/*void USART_Transmit( unsigned char data )
{
	// Wait for empty transmit buffer 
	while ( !( UCSRA & (1<<UDRE)) );
	
	// Put data into buffer, sends the data 
	UDR = data;
	PORTC=0b00111111;
	
}*/


unsigned char USART_Receive( void )
{
	// Wait for data to be received 
	while ( !(UCSRA & (1<<RXC)) );
  70:	5f 9b       	sbis	0x0b, 7	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <USART_Receive>
	// Get and return received data from buffer 
	return UDR;
  74:	8c b1       	in	r24, 0x0c	; 12
}
  76:	99 27       	eor	r25, r25
  78:	08 95       	ret

0000007a <main>:


int main(void)
{
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61
	DDRB=0b11111111;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000000;
  86:	18 ba       	out	0x18, r1	; 24
	unsigned char b;
	uint8_t baud;
	baud=12;
	USART_Init(baud);
  88:	8c e0       	ldi	r24, 0x0C	; 12
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	e7 df       	rcall	.-50     	; 0x5c <USART_Init>
	while(1)
	{
	PORTB=0b00000000;
  8e:	18 ba       	out	0x18, r1	; 24
//	USART_Transmit(a);	
	b=USART_Receive();
  90:	ef df       	rcall	.-34     	; 0x70 <USART_Receive>
	if(b=='3')
  92:	83 33       	cpi	r24, 0x33	; 51
  94:	29 f4       	brne	.+10     	; 0xa0 <main+0x26>
	{
		PORTB=0b0110;
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	88 bb       	out	0x18, r24	; 24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	9e e4       	ldi	r25, 0x4E	; 78
  9e:	0a c0       	rjmp	.+20     	; 0xb4 <main+0x3a>
		_delay_ms(10);
	}
	else
	{
		if(b=='1')
  a0:	81 33       	cpi	r24, 0x31	; 49
  a2:	11 f4       	brne	.+4      	; 0xa8 <main+0x2e>
		{ 	
			PORTB=0b1010;
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x34>
			_delay_ms(5);
		}
		else
		if(b=='5')
  a8:	85 33       	cpi	r24, 0x35	; 53
  aa:	89 f7       	brne	.-30     	; 0x8e <main+0x14>
		{ 
			PORTB=0b101;
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	88 bb       	out	0x18, r24	; 24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	97 e2       	ldi	r25, 0x27	; 39
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x3a>
  b8:	ea cf       	rjmp	.-44     	; 0x8e <main+0x14>
