
usart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000af8  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006f9  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ea       	ldi	r30, 0xA6	; 166
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0d d0       	rcall	.+26     	; 0x74 <main>
  5a:	23 c0       	rjmp	.+70     	; 0xa2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__heap_end>

0000005e <USART_Init>:
#define MYUBRR FOSC/16/BAUD-1


void USART_Init( unsigned int ubrr)
{
UBRRH = (unsigned char)(ubrr>>8);	/* Set baud rate */
  5e:	90 bd       	out	0x20, r25	; 32
UBRRL = (unsigned char)ubrr;
  60:	89 b9       	out	0x09, r24	; 9
UCSRB = (1<<RXEN);	/* Enable receiver and transmitter */
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	8a b9       	out	0x0a, r24	; 10
UCSRC = (1<<URSEL)|(3<<UCSZ0);	/* Set frame format: 8data, 2stop bit */
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
}
  6a:	08 95       	ret

0000006c <USART_Receive>:


unsigned char USART_Receive( void )
{
while ( !(UCSRA & (1<<RXC)) );
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <USART_Receive>
return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	08 95       	ret

00000074 <main>:

int main (void)
{
 uint8_t t; 
 unsigned char c;
 DDRD=0b00000000;
  74:	11 ba       	out	0x11, r1	; 17
 DDRB=0b11111111;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	87 bb       	out	0x17, r24	; 23
 DDRC=0b11111111;
  7a:	84 bb       	out	0x14, r24	; 20
 PORTD=0b11111111;
  7c:	82 bb       	out	0x12, r24	; 18
 PORTB=0b11111111;
  7e:	88 bb       	out	0x18, r24	; 24
#define MYUBRR FOSC/16/BAUD-1


void USART_Init( unsigned int ubrr)
{
UBRRH = (unsigned char)(ubrr>>8);	/* Set baud rate */
  80:	10 bc       	out	0x20, r1	; 32
UBRRL = (unsigned char)ubrr;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
UCSRB = (1<<RXEN);	/* Enable receiver and transmitter */
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	8a b9       	out	0x0a, r24	; 10
UCSRC = (1<<URSEL)|(3<<UCSZ0);	/* Set frame format: 8data, 2stop bit */
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
 USART_Init ( MYUBRR );
 while(1)
 {
 c= USART_Receive();
 if(c=='a')
 PORTC=0b11111111;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
}


unsigned char USART_Receive( void )
{
while ( !(UCSRA & (1<<RXC)) );
  90:	5f 9b       	sbis	0x0b, 7	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x1c>
return UDR;
  94:	8c b1       	in	r24, 0x0c	; 12
 PORTB=0b11111111;
 USART_Init ( MYUBRR );
 while(1)
 {
 c= USART_Receive();
 if(c=='a')
  96:	81 36       	cpi	r24, 0x61	; 97
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x2a>
 PORTC=0b11111111;
  9a:	95 bb       	out	0x15, r25	; 21
  9c:	f9 cf       	rjmp	.-14     	; 0x90 <main+0x1c>
 else
 PORTC=0b00000000;}
  9e:	15 ba       	out	0x15, r1	; 21
  a0:	f7 cf       	rjmp	.-18     	; 0x90 <main+0x1c>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
