
sumoTry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  0000023a  000002ae  2**0
                  ALLOC
  2 .stab         00000e10  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000079b  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	32 c0       	rjmp	.+100    	; 0x66 <__ctors_end>
   2:	4c c0       	rjmp	.+152    	; 0x9c <__bad_interrupt>
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	4a c0       	rjmp	.+148    	; 0x9c <__bad_interrupt>
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	48 c0       	rjmp	.+144    	; 0x9c <__bad_interrupt>
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	46 c0       	rjmp	.+140    	; 0x9c <__bad_interrupt>
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	44 c0       	rjmp	.+136    	; 0x9c <__bad_interrupt>
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	42 c0       	rjmp	.+132    	; 0x9c <__bad_interrupt>
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	40 c0       	rjmp	.+128    	; 0x9c <__bad_interrupt>
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	3e c0       	rjmp	.+124    	; 0x9c <__bad_interrupt>
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	3c c0       	rjmp	.+120    	; 0x9c <__bad_interrupt>
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	e1 c0       	rjmp	.+450    	; 0x1ea <main+0x110>
  28:	ee c0       	rjmp	.+476    	; 0x206 <main+0x12c>
  2a:	d9 c0       	rjmp	.+434    	; 0x1de <main+0x104>
  2c:	ec c0       	rjmp	.+472    	; 0x206 <main+0x12c>
  2e:	ca c0       	rjmp	.+404    	; 0x1c4 <main+0xea>
  30:	a5 c0       	rjmp	.+330    	; 0x17c <main+0xa2>
  32:	d5 c0       	rjmp	.+426    	; 0x1de <main+0x104>
  34:	f9 c0       	rjmp	.+498    	; 0x228 <main+0x14e>
  36:	cd c0       	rjmp	.+410    	; 0x1d2 <main+0xf8>
  38:	f7 c0       	rjmp	.+494    	; 0x228 <main+0x14e>
  3a:	a0 c0       	rjmp	.+320    	; 0x17c <main+0xa2>
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <main+0x14e>
  3e:	c9 c0       	rjmp	.+402    	; 0x1d2 <main+0xf8>
  40:	9d c0       	rjmp	.+314    	; 0x17c <main+0xa2>
  42:	c0 c0       	rjmp	.+384    	; 0x1c4 <main+0xea>
  44:	9b c0       	rjmp	.+310    	; 0x17c <main+0xa2>
  46:	e5 c0       	rjmp	.+458    	; 0x212 <main+0x138>
  48:	ef c0       	rjmp	.+478    	; 0x228 <main+0x14e>
  4a:	ee c0       	rjmp	.+476    	; 0x228 <main+0x14e>
  4c:	ed c0       	rjmp	.+474    	; 0x228 <main+0x14e>
  4e:	96 c0       	rjmp	.+300    	; 0x17c <main+0xa2>
  50:	eb c0       	rjmp	.+470    	; 0x228 <main+0x14e>
  52:	94 c0       	rjmp	.+296    	; 0x17c <main+0xa2>
  54:	e9 c0       	rjmp	.+466    	; 0x228 <main+0x14e>
  56:	dd c0       	rjmp	.+442    	; 0x212 <main+0x138>
  58:	e7 c0       	rjmp	.+462    	; 0x228 <main+0x14e>
  5a:	e6 c0       	rjmp	.+460    	; 0x228 <main+0x14e>
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <main+0x14e>
  5e:	dd c0       	rjmp	.+442    	; 0x21a <main+0x140>
  60:	e3 c0       	rjmp	.+454    	; 0x228 <main+0x14e>
  62:	8c c0       	rjmp	.+280    	; 0x17c <main+0xa2>
  64:	cc c0       	rjmp	.+408    	; 0x1fe <main+0x124>

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f2 e0       	ldi	r31, 0x02	; 2
  7c:	02 c0       	rjmp	.+4      	; 0x82 <.do_copy_data_start>

0000007e <.do_copy_data_loop>:
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0

00000082 <.do_copy_data_start>:
  82:	a0 36       	cpi	r26, 0x60	; 96
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <.do_copy_data_loop>

00000088 <__do_clear_bss>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 36       	cpi	r26, 0x63	; 99
  94:	b1 07       	cpc	r27, r17
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	cd c0       	rjmp	.+410    	; 0x236 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__heap_end>

0000009e <calc>:
#define LED_OFF PORTB|=0x01;
#define SWITCH_PRESSED !(PINB & 0x20)	
uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	97 b9       	out	0x07, r25	; 7
	ADMUX|=w;
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	98 2b       	or	r25, r24
  a8:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=_BV(ADEN);
  aa:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
  ac:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <calc+0x10>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
  b2:	16 b8       	out	0x06, r1	; 6
	return ADCH;
  b4:	85 b1       	in	r24, 0x05	; 5


	//	return 0x0;		//change here
	}
  b6:	08 95       	ret

000000b8 <main_initialize>:


void main_initialize()
{
		
		ADCSRA&=~(1<<ADIF);  		// to disable the adc interrupt flag....
  b8:	34 98       	cbi	0x06, 4	; 6
		ADMUX |= (1 << REFS0); 		// set the voltage reference as AVcc 
  ba:	3e 9a       	sbi	0x07, 6	; 7
		ADMUX|=_BV(ADLAR);			// left adjusted Result
  bc:	3d 9a       	sbi	0x07, 5	; 7
		
		ADCSRA|=(_BV(ADPS0) | _BV(ADPS1) );  // set the ADC input frequency at 125 Khz(Prescaling of 8)
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	86 b9       	out	0x06, r24	; 6
	
		OCR1B=0xff;   	// output compare register  for right motor  
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	99 bd       	out	0x29, r25	; 41
  ca:	88 bd       	out	0x28, r24	; 40
		OCR1A=0xff;		// output compare register  for left motor
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
		


		/* TOP value is 00FFh for both OCR1A and OCR1B*/

		TCCR1A=0xA1;	// define type of PWM	
  d0:	81 ea       	ldi	r24, 0xA1	; 161
  d2:	8f bd       	out	0x2f, r24	; 47

		/*Timer/Counter 1 Control  and pwm at pin OCR1A(PB1) */

		TCCR1B=0x04; //for start pwm
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	8e bd       	out	0x2e, r24	; 46
}
  d8:	08 95       	ret

000000da <main>:

int main()
{
  da:	6f 92       	push	r6
  dc:	7f 92       	push	r7
  de:	8f 92       	push	r8
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
			uint8_t SWAP=0,botDir=0,forward=0b1010,count=0x0,sensorReference,Actual_input,lastDir=0;
			uint16_t cnt=0,temp;
			DDRD=0b00001111; 
  f4:	8f e0       	ldi	r24, 0x0F	; 15
  f6:	81 bb       	out	0x11, r24	; 17
			DDRB=0x0f;
  f8:	87 bb       	out	0x17, r24	; 23
			PORTB=0xf0;
  fa:	80 ef       	ldi	r24, 0xF0	; 240
  fc:	88 bb       	out	0x18, r24	; 24
			DDRC=0x00;  
  fe:	14 ba       	out	0x14, r1	; 20


void main_initialize()
{
		
		ADCSRA&=~(1<<ADIF);  		// to disable the adc interrupt flag....
 100:	34 98       	cbi	0x06, 4	; 6
		ADMUX |= (1 << REFS0); 		// set the voltage reference as AVcc 
 102:	3e 9a       	sbi	0x07, 6	; 7
		ADMUX|=_BV(ADLAR);			// left adjusted Result
 104:	3d 9a       	sbi	0x07, 5	; 7
		
		ADCSRA|=(_BV(ADPS0) | _BV(ADPS1) );  // set the ADC input frequency at 125 Khz(Prescaling of 8)
 106:	86 b1       	in	r24, 0x06	; 6
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	86 b9       	out	0x06, r24	; 6
	
		OCR1B=0xff;   	// output compare register  for right motor  
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	99 bd       	out	0x29, r25	; 41
 112:	88 bd       	out	0x28, r24	; 40
		OCR1A=0xff;		// output compare register  for left motor
 114:	9b bd       	out	0x2b, r25	; 43
 116:	8a bd       	out	0x2a, r24	; 42
		


		/* TOP value is 00FFh for both OCR1A and OCR1B*/

		TCCR1A=0xA1;	// define type of PWM	
 118:	81 ea       	ldi	r24, 0xA1	; 161
 11a:	8f bd       	out	0x2f, r24	; 47

		/*Timer/Counter 1 Control  and pwm at pin OCR1A(PB1) */

		TCCR1B=0x04; //for start pwm
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	8e bd       	out	0x2e, r24	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	fc 01       	movw	r30, r24
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x4c>
 12a:	fc 01       	movw	r30, r24
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x52>
 130:	fc 01       	movw	r30, r24
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x58>
 136:	fc 01       	movw	r30, r24
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x5e>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x62>
				
			for(temp=0;temp<5;temp++)
				{
				_delay_ms(20);
				}
				PORTB=0x00;
 140:	18 ba       	out	0x18, r1	; 24
				//PORTD=0x1010;			

		/* pwm at pin OCR1B(PB2) and clock freq. of timer(3 LSB 000 sys. clock) */ 
		/* maximum MASTER_PWM value can be 00FFh */

		MASTER_PWM=255;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 60 00 	sts	0x0060, r24
 148:	40 e0       	ldi	r20, 0x00	; 0
			Actual_input=0x0;
			for(count=0;count<=4;count++)
			{
				if(calc(count)>sensorReference)		//check
				{
					Actual_input|=(1<<count);
 14a:	51 e0       	ldi	r21, 0x01	; 1
 14c:	65 2e       	mov	r6, r21
 14e:	71 2c       	mov	r7, r1
				
				
				
				
				
					M_OUTPUT=0b01001;
 150:	19 e0       	ldi	r17, 0x09	; 9
					OCR1A=(MASTER_PWM*70/100); 
 152:	a2 eb       	ldi	r26, 0xB2	; 178
 154:	b0 e0       	ldi	r27, 0x00	; 0


				case 0b00011100:// sharp left slow			done
			

					M_OUTPUT=0b0110;
 156:	36 e0       	ldi	r19, 0x06	; 6
 158:	f3 2e       	mov	r15, r19
					OCR1A=(MASTER_PWM*40/100); 
 15a:	26 e6       	ldi	r18, 0x66	; 102
 15c:	82 2e       	mov	r8, r18
 15e:	91 2c       	mov	r9, r1

				case 0b00010000:// sharp left			done
				case 0b00011000:
				
				M_OUTPUT=0b0110;
					OCR1A=(MASTER_PWM*50/100); 
 160:	9f e7       	ldi	r25, 0x7F	; 127
 162:	c9 2e       	mov	r12, r25
 164:	d1 2c       	mov	r13, r1
				
				
				case 0b00011111:
				
					M_OUTPUT=0b1001;			 //	output for motors
					OCR1A=(MASTER_PWM*60/100);   // enable for right
 166:	89 e9       	ldi	r24, 0x99	; 153
 168:	a8 2e       	mov	r10, r24
 16a:	b1 2c       	mov	r11, r1
				if(lastDir!=9)
					M_OUTPUT=0b1001;			 	//	output for motors
				else 
					M_OUTPUT=0b0110;			 	//	output for motors
						
					OCR1A=(MASTER_PWM*100/100); 
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d0 e0       	ldi	r29, 0x00	; 0


				case 0b00000110:
				case 0b00000010: 
				  
					M_OUTPUT=0b1010;			 	//	output for motors
 170:	0a e0       	ldi	r16, 0x0A	; 10
					OCR1A=(MASTER_PWM*80/100);   // enable for right
 172:	6c ec       	ldi	r22, 0xCC	; 204
 174:	70 e0       	ldi	r23, 0x00	; 0
				//PORTD=0x1010;			

		/* pwm at pin OCR1B(PB2) and clock freq. of timer(3 LSB 000 sys. clock) */ 
		/* maximum MASTER_PWM value can be 00FFh */

		MASTER_PWM=255;
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
#define LED_OFF PORTB|=0x01;
#define SWITCH_PRESSED !(PINB & 0x20)	
uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
 17c:	87 b1       	in	r24, 0x07	; 7
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	87 b9       	out	0x07, r24	; 7
	ADMUX|=w;
 182:	87 b1       	in	r24, 0x07	; 7
 184:	82 2b       	or	r24, r18
 186:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=_BV(ADEN);
 188:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
 18a:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
 18c:	34 9b       	sbis	0x06, 4	; 6
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0xb2>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
 190:	16 b8       	out	0x06, r1	; 6
	return ADCH;
 192:	85 b1       	in	r24, 0x05	; 5
		{	
			
			Actual_input=0x0;
			for(count=0;count<=4;count++)
			{
				if(calc(count)>sensorReference)		//check
 194:	85 36       	cpi	r24, 0x65	; 101
 196:	40 f0       	brcs	.+16     	; 0x1a8 <main+0xce>
				{
					Actual_input|=(1<<count);
 198:	c3 01       	movw	r24, r6
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0xc8>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <main+0xc4>
 1a6:	58 2b       	or	r21, r24
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
		
		while(1)
		{	
			
			Actual_input=0x0;
			for(count=0;count<=4;count++)
 1ac:	25 30       	cpi	r18, 0x05	; 5
 1ae:	31 05       	cpc	r19, r1
 1b0:	29 f7       	brne	.-54     	; 0x17c <main+0xa2>
				{
					Actual_input|=(1<<count);
				}
			}
	
			Actual_input&=0b11111;  // make bits zero other than 4 LSB bits
 1b2:	e5 2f       	mov	r30, r21
 1b4:	ef 71       	andi	r30, 0x1F	; 31
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
			//botSensors=0b11&~(botSensors);

			//botSensors=0b11&~(botSensors);


			switch(lineSensors)
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ed 5e       	subi	r30, 0xED	; 237
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	09 94       	ijmp
			//	case 0b00001111:
			//	case 0b00011110:
			
			//	case 0b00011111:
				
		            M_OUTPUT=0b1010;			 //	output for motors
 1c4:	02 bb       	out	0x12, r16	; 18
					OCR1A=(MASTER_PWM*80/100);   // enable for right
 1c6:	7b bd       	out	0x2b, r23	; 43
 1c8:	6a bd       	out	0x2a, r22	; 42
					OCR1B=(MASTER_PWM*80/100);	 // enable for left
 1ca:	79 bd       	out	0x29, r23	; 41
 1cc:	68 bd       	out	0x28, r22	; 40
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	d2 cf       	rjmp	.-92     	; 0x176 <main+0x9c>

			
				case 0b00001100:  
				case 0b00001000: 
				
					M_OUTPUT=0b1010;			 	//	output for motors
 1d2:	02 bb       	out	0x12, r16	; 18
					OCR1A=(MASTER_PWM*80/100);   // enable for right
 1d4:	7b bd       	out	0x2b, r23	; 43
 1d6:	6a bd       	out	0x2a, r22	; 42
					OCR1B=(MASTER_PWM*80/100);	 // enable for left
 1d8:	79 bd       	out	0x29, r23	; 41
 1da:	68 bd       	out	0x28, r22	; 40
 1dc:	23 c0       	rjmp	.+70     	; 0x224 <main+0x14a>


				case 0b00000110:
				case 0b00000010: 
				  
					M_OUTPUT=0b1010;			 	//	output for motors
 1de:	02 bb       	out	0x12, r16	; 18
					OCR1A=(MASTER_PWM*80/100);   // enable for right
 1e0:	7b bd       	out	0x2b, r23	; 43
 1e2:	6a bd       	out	0x2a, r22	; 42
					OCR1B=(MASTER_PWM*80/100);	 // enable for left
 1e4:	79 bd       	out	0x29, r23	; 41
 1e6:	68 bd       	out	0x28, r22	; 40
 1e8:	24 c0       	rjmp	.+72     	; 0x232 <main+0x158>
					lastDir=3;
					break;

				case 0b00000000: 
				if(lastDir!=9)
 1ea:	49 30       	cpi	r20, 0x09	; 9
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <main+0x118>
					M_OUTPUT=0b1001;			 	//	output for motors
 1ee:	12 bb       	out	0x12, r17	; 18
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <main+0x11a>
				else 
					M_OUTPUT=0b0110;			 	//	output for motors
 1f2:	f2 ba       	out	0x12, r15	; 18
						
					OCR1A=(MASTER_PWM*100/100); 
 1f4:	db bd       	out	0x2b, r29	; 43
 1f6:	ca bd       	out	0x2a, r28	; 42
					OCR1B=(MASTER_PWM*100/100);
 1f8:	d9 bd       	out	0x29, r29	; 41
 1fa:	c8 bd       	out	0x28, r28	; 40
 1fc:	bc cf       	rjmp	.-136    	; 0x176 <main+0x9c>
					break;
				
				
				case 0b00011111:
				
					M_OUTPUT=0b1001;			 //	output for motors
 1fe:	12 bb       	out	0x12, r17	; 18
					OCR1A=(MASTER_PWM*60/100);   // enable for right
 200:	bb bc       	out	0x2b, r11	; 43
 202:	aa bc       	out	0x2a, r10	; 42
 204:	14 c0       	rjmp	.+40     	; 0x22e <main+0x154>
					lastDir=3;
					break;
				case 0b00000001: // sharp right		done
				case 0b00000011:
				
				M_OUTPUT=0b1001;
 206:	12 bb       	out	0x12, r17	; 18
					OCR1A=(MASTER_PWM*70/100); 
 208:	bb bd       	out	0x2b, r27	; 43
 20a:	aa bd       	out	0x2a, r26	; 42
					OCR1B=(MASTER_PWM*50/100);
 20c:	d9 bc       	out	0x29, r13	; 41
 20e:	c8 bc       	out	0x28, r12	; 40
 210:	10 c0       	rjmp	.+32     	; 0x232 <main+0x158>
					break;

				case 0b00010000:// sharp left			done
				case 0b00011000:
				
				M_OUTPUT=0b0110;
 212:	f2 ba       	out	0x12, r15	; 18
					OCR1A=(MASTER_PWM*50/100); 
 214:	db bc       	out	0x2b, r13	; 43
 216:	ca bc       	out	0x2a, r12	; 42
 218:	03 c0       	rjmp	.+6      	; 0x220 <main+0x146>


				case 0b00011100:// sharp left slow			done
			

					M_OUTPUT=0b0110;
 21a:	f2 ba       	out	0x12, r15	; 18
					OCR1A=(MASTER_PWM*40/100); 
 21c:	9b bc       	out	0x2b, r9	; 43
 21e:	8a bc       	out	0x2a, r8	; 42
					OCR1B=(MASTER_PWM*70/100);
 220:	b9 bd       	out	0x29, r27	; 41
 222:	a8 bd       	out	0x28, r26	; 40
 224:	49 e0       	ldi	r20, 0x09	; 9
 226:	a7 cf       	rjmp	.-178    	; 0x176 <main+0x9c>
				
				
				
				
				
					M_OUTPUT=0b01001;
 228:	12 bb       	out	0x12, r17	; 18
					OCR1A=(MASTER_PWM*70/100); 
 22a:	bb bd       	out	0x2b, r27	; 43
 22c:	aa bd       	out	0x2a, r26	; 42
					OCR1B=(MASTER_PWM*70/100);
 22e:	b9 bd       	out	0x29, r27	; 41
 230:	a8 bd       	out	0x28, r26	; 40
 232:	43 e0       	ldi	r20, 0x03	; 3
 234:	a0 cf       	rjmp	.-192    	; 0x176 <main+0x9c>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
