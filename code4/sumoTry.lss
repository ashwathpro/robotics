
sumoTry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  000002de  00000352  2**0
                  ALLOC
  3 .stab         00000abc  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000771  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	3a c0       	rjmp	.+116    	; 0x78 <__bad_interrupt>
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	38 c0       	rjmp	.+112    	; 0x78 <__bad_interrupt>
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	36 c0       	rjmp	.+108    	; 0x78 <__bad_interrupt>
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	34 c0       	rjmp	.+104    	; 0x78 <__bad_interrupt>
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	32 c0       	rjmp	.+100    	; 0x78 <__bad_interrupt>
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	30 c0       	rjmp	.+96     	; 0x78 <__bad_interrupt>
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <__bad_interrupt>
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	2c c0       	rjmp	.+88     	; 0x78 <__bad_interrupt>
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	2a c0       	rjmp	.+84     	; 0x78 <__bad_interrupt>
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	0f c1       	rjmp	.+542    	; 0x246 <main+0x38>
  28:	09 c1       	rjmp	.+530    	; 0x23c <main+0x2e>
  2a:	1a c1       	rjmp	.+564    	; 0x260 <main+0x52>
  2c:	07 c1       	rjmp	.+526    	; 0x23c <main+0x2e>
  2e:	0b c1       	rjmp	.+534    	; 0x246 <main+0x38>
  30:	11 c1       	rjmp	.+546    	; 0x254 <main+0x46>
  32:	16 c1       	rjmp	.+556    	; 0x260 <main+0x52>
  34:	08 c1       	rjmp	.+528    	; 0x246 <main+0x38>
  36:	0b c1       	rjmp	.+534    	; 0x24e <main+0x40>
  38:	01 c1       	rjmp	.+514    	; 0x23c <main+0x2e>
  3a:	12 c1       	rjmp	.+548    	; 0x260 <main+0x52>
  3c:	11 c1       	rjmp	.+546    	; 0x260 <main+0x52>
  3e:	03 c1       	rjmp	.+518    	; 0x246 <main+0x38>
  40:	fd c0       	rjmp	.+506    	; 0x23c <main+0x2e>

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf e5       	ldi	r28, 0x5F	; 95
  48:	d4 e0       	ldi	r29, 0x04	; 4
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61

0000004e <__do_copy_data>:
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	a0 e6       	ldi	r26, 0x60	; 96
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	ec ed       	ldi	r30, 0xDC	; 220
  56:	f2 e0       	ldi	r31, 0x02	; 2
  58:	02 c0       	rjmp	.+4      	; 0x5e <.do_copy_data_start>

0000005a <.do_copy_data_loop>:
  5a:	05 90       	lpm	r0, Z+
  5c:	0d 92       	st	X+, r0

0000005e <.do_copy_data_start>:
  5e:	a2 36       	cpi	r26, 0x62	; 98
  60:	b1 07       	cpc	r27, r17
  62:	d9 f7       	brne	.-10     	; 0x5a <.do_copy_data_loop>

00000064 <__do_clear_bss>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a2 e6       	ldi	r26, 0x62	; 98
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	01 c0       	rjmp	.+2      	; 0x6e <.do_clear_bss_start>

0000006c <.do_clear_bss_loop>:
  6c:	1d 92       	st	X+, r1

0000006e <.do_clear_bss_start>:
  6e:	a7 36       	cpi	r26, 0x67	; 103
  70:	b1 07       	cpc	r27, r17
  72:	e1 f7       	brne	.-8      	; 0x6c <.do_clear_bss_loop>
  74:	cc d0       	rcall	.+408    	; 0x20e <main>
  76:	31 c1       	rjmp	.+610    	; 0x2da <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__heap_end>

0000007a <initVariables>:

void initVariables()
{

	//check for sensors
	DDRC = ~(FOUR_SENSOR_MASK);
  7a:	80 ef       	ldi	r24, 0xF0	; 240
  7c:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	81 bb       	out	0x11, r24	; 17
	DDRB=0x07;
  82:	87 e0       	ldi	r24, 0x07	; 7
  84:	87 bb       	out	0x17, r24	; 23


	//setting robot direction in forward direction
	MOTOR_OUTPUT   = MOTOR_OUTPUT_FRONT;
  86:	8a e0       	ldi	r24, 0x0A	; 10
  88:	82 bb       	out	0x12, r24	; 18
	// PWM starting
	TCCR0=0x04;
  8a:	94 e0       	ldi	r25, 0x04	; 4
  8c:	93 bf       	out	0x33, r25	; 51
	/* TOP value is 00FFh for both OC1A and OC1B*/
	TCCR1A=0xA1;
  8e:	81 ea       	ldi	r24, 0xA1	; 161
  90:	8f bd       	out	0x2f, r24	; 47
		/*Timer/Counter 1 Control  and pwm at pin OC1A(PB1) */
	TCCR1B=0x04;
  92:	9e bd       	out	0x2e, r25	; 46
		/* pwm at pin OC1B(PB2) and clock freq. of timer(3 LSB 000 sys. clock) */

	
		
		   ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 8 -     125KHz sample rate @ 1MHz 
  94:	86 b1       	in	r24, 0x06	; 6
  96:	83 60       	ori	r24, 0x03	; 3
  98:	86 b9       	out	0x06, r24	; 6
			ADMUX |= (1 << REFS0);   // Set ADC reference to AVCC 
  9a:	3e 9a       	sbi	0x07, 6	; 7
			ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
  9c:	3d 9a       	sbi	0x07, 5	; 7
		
		/* setting of Top PWM */
		
		ADCSRA|= (1<<ADEN); //enable adc
  9e:	37 9a       	sbi	0x06, 7	; 6
		//g_TOP_PWM = getADCValue(5);
		ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
  a0:	16 b8       	out	0x06, r1	; 6
  a2:	08 95       	ret

000000a4 <RandomNumGenerator>:

}

uint8_t RandomNumGenerator(uint8_t min , uint8_t max)
{
  a4:	48 2f       	mov	r20, r24
	uint8_t randumNum , clockNum = (TCNT0 & 0xFF) ;
  a6:	82 b7       	in	r24, 0x32	; 50
	
	randumNum = ((clockNum - min)%(max-min+1)) + min;
  a8:	24 2f       	mov	r18, r20
  aa:	33 27       	eor	r19, r19
  ac:	99 27       	eor	r25, r25
  ae:	77 27       	eor	r23, r23
  b0:	62 1b       	sub	r22, r18
  b2:	73 0b       	sbc	r23, r19
  b4:	6f 5f       	subi	r22, 0xFF	; 255
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	82 1b       	sub	r24, r18
  ba:	93 0b       	sbc	r25, r19
  bc:	e7 d0       	rcall	.+462    	; 0x28c <__divmodhi4>
  be:	48 0f       	add	r20, r24
	
	return randumNum;

}
  c0:	84 2f       	mov	r24, r20
  c2:	99 27       	eor	r25, r25
  c4:	08 95       	ret

000000c6 <MakePWMrandom>:

inline void MakePWMrandom()
{
	//get a  randomNum
	uint8_t	randumNum = RandomNumGenerator( 1 , 2 * PER_PWM_WINDOW);
  c6:	60 ea       	ldi	r22, 0xA0	; 160
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	ec df       	rcall	.-40     	; 0xa4 <RandomNumGenerator>
  cc:	20 91 60 00 	lds	r18, 0x0060
  d0:	48 2f       	mov	r20, r24
  d2:	55 27       	eor	r21, r21
	if(randumNum <= PER_PWM_WINDOW)
  d4:	81 35       	cpi	r24, 0x51	; 81
  d6:	b0 f4       	brcc	.+44     	; 0x104 <MakePWMrandom+0x3e>
		{
			LEFT_MOTOR_PWM  =  g_TOP_PWM;
  d8:	82 2f       	mov	r24, r18
  da:	99 27       	eor	r25, r25
  dc:	99 bd       	out	0x29, r25	; 41
  de:	88 bd       	out	0x28, r24	; 40
			RIGHT_MOTOR_PWM =  ((100-randumNum)* g_TOP_PWM)/100;
  e0:	24 e6       	ldi	r18, 0x64	; 100
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	24 1b       	sub	r18, r20
  e6:	35 0b       	sbc	r19, r21
  e8:	ac 01       	movw	r20, r24
  ea:	24 9f       	mul	r18, r20
  ec:	c0 01       	movw	r24, r0
  ee:	25 9f       	mul	r18, r21
  f0:	90 0d       	add	r25, r0
  f2:	34 9f       	mul	r19, r20
  f4:	90 0d       	add	r25, r0
  f6:	11 24       	eor	r1, r1
  f8:	64 e6       	ldi	r22, 0x64	; 100
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	c7 d0       	rcall	.+398    	; 0x28c <__divmodhi4>
  fe:	7b bd       	out	0x2b, r23	; 43
 100:	6a bd       	out	0x2a, r22	; 42
 102:	08 95       	ret
		}
	if(randumNum > PER_PWM_WINDOW)
		{
			LEFT_MOTOR_PWM  =  ((100 - (randumNum - PER_PWM_WINDOW))* g_TOP_PWM)/100;
 104:	84 eb       	ldi	r24, 0xB4	; 180
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	84 1b       	sub	r24, r20
 10a:	95 0b       	sbc	r25, r21
 10c:	33 27       	eor	r19, r19
 10e:	ac 01       	movw	r20, r24
 110:	42 9f       	mul	r20, r18
 112:	c0 01       	movw	r24, r0
 114:	43 9f       	mul	r20, r19
 116:	90 0d       	add	r25, r0
 118:	52 9f       	mul	r21, r18
 11a:	90 0d       	add	r25, r0
 11c:	11 24       	eor	r1, r1
 11e:	64 e6       	ldi	r22, 0x64	; 100
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	b4 d0       	rcall	.+360    	; 0x28c <__divmodhi4>
 124:	79 bd       	out	0x29, r23	; 41
 126:	68 bd       	out	0x28, r22	; 40
			RIGHT_MOTOR_PWM =  g_TOP_PWM;
 128:	3b bd       	out	0x2b, r19	; 43
 12a:	2a bd       	out	0x2a, r18	; 42
 12c:	08 95       	ret

0000012e <RotateRobotAtCornor>:
}

void RotateRobotAtCornor()
{
	// give maximum PWM to motors	
	RIGHT_MOTOR_PWM = g_TOP_PWM;
 12e:	80 91 60 00 	lds	r24, 0x0060
 132:	99 27       	eor	r25, r25
 134:	9b bd       	out	0x2b, r25	; 43
 136:	8a bd       	out	0x2a, r24	; 42
	LEFT_MOTOR_PWM	= g_TOP_PWM;
 138:	99 bd       	out	0x29, r25	; 41
 13a:	88 bd       	out	0x28, r24	; 40
	//move robot either clock wise or anti clock wise
	if(RandomNumGenerator(0 ,1))
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	b1 df       	rcall	.-158    	; 0xa4 <RandomNumGenerator>
 142:	88 23       	and	r24, r24
 144:	11 f0       	breq	.+4      	; 0x14a <RotateRobotAtCornor+0x1c>
		//rotate clock wise
			MOTOR_OUTPUT = MOTOR_OUTPUT_CLOCKWISE;
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	01 c0       	rjmp	.+2      	; 0x14c <RotateRobotAtCornor+0x1e>
	else
		//rotate Anti-clock wise
 		MOTOR_OUTPUT = MOTOR_OUTPUT_ANTICLOCKWISE;
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	05 c0       	rjmp	.+10     	; 0x15c <RotateRobotAtCornor+0x2e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	80 ea       	ldi	r24, 0xA0	; 160
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <RotateRobotAtCornor+0x28>
 15a:	2f 5f       	subi	r18, 0xFF	; 255
	// creating delay for some time	
	for(temp1=0;temp1 < DELAY_FOR_NINTY_DEGREE;temp1++ )
 15c:	28 33       	cpi	r18, 0x38	; 56
 15e:	c8 f3       	brcs	.-14     	; 0x152 <RotateRobotAtCornor+0x24>
 160:	20 93 66 00 	sts	0x0066, r18
				_delay_ms(DELAY_PRECISION);
	
	// switch off the motors
	RIGHT_MOTOR_PWM = LEFT_MOTOR_PWM = MOTOR_OUTPUT =0;
 164:	12 ba       	out	0x12, r1	; 18
 166:	19 bc       	out	0x29, r1	; 41
 168:	18 bc       	out	0x28, r1	; 40
 16a:	88 b5       	in	r24, 0x28	; 40
 16c:	99 b5       	in	r25, 0x29	; 41
 16e:	9b bd       	out	0x2b, r25	; 43
 170:	8a bd       	out	0x2a, r24	; 42
 172:	08 95       	ret

00000174 <getADCValue>:
}

inline uint8_t getADCValue(uint8_t selectADC)
{
	
	ADMUX&=0xF0;
 174:	97 b1       	in	r25, 0x07	; 7
 176:	90 7f       	andi	r25, 0xF0	; 240
 178:	97 b9       	out	0x07, r25	; 7
	ADMUX|=selectADC;  // MUX values needed to be changed to use ADC0
 17a:	97 b1       	in	r25, 0x07	; 7
 17c:	98 2b       	or	r25, r24
 17e:	97 b9       	out	0x07, r25	; 7

	ADCSRA|= (1<<ADSC);    //start conversion
 180:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10))
 182:	34 9b       	sbis	0x06, 4	; 6
 184:	fe cf       	rjmp	.-4      	; 0x182 <getADCValue+0xe>
		{
		;//wait to finish convertion ADIF is set.will come out of loop 
		}			
	return ADCH;
 186:	85 b1       	in	r24, 0x05	; 5
 188:	99 27       	eor	r25, r25
 18a:	08 95       	ret

0000018c <getSensorValues>:
			
}

uint8_t getSensorValues()
{
	ADCSRA|= (1<<ADEN); //enable adc
 18c:	37 9a       	sbi	0x06, 7	; 6
	temp1=0;
 18e:	10 92 66 00 	sts	0x0066, r1
	//Line sensors
		for(temp2=0;temp2<2;temp2++)
 192:	10 92 63 00 	sts	0x0063, r1
 196:	16 c0       	rjmp	.+44     	; 0x1c4 <getSensorValues+0x38>
			if(getADCValue(temp2) > LINE_SENSOR_THRESHHOLD_ADC )
 198:	ed df       	rcall	.-38     	; 0x174 <getADCValue>
 19a:	8d 33       	cpi	r24, 0x3D	; 61
 19c:	70 f0       	brcs	.+28     	; 0x1ba <getSensorValues+0x2e>
				temp1|=1<<temp2;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	00 90 63 00 	lds	r0, 0x0063
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <getSensorValues+0x20>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <getSensorValues+0x1c>
 1b0:	20 91 66 00 	lds	r18, 0x0066
 1b4:	28 2b       	or	r18, r24
 1b6:	20 93 66 00 	sts	0x0066, r18
uint8_t getSensorValues()
{
	ADCSRA|= (1<<ADEN); //enable adc
	temp1=0;
	//Line sensors
		for(temp2=0;temp2<2;temp2++)
 1ba:	80 91 63 00 	lds	r24, 0x0063
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 63 00 	sts	0x0063, r24
 1c4:	80 91 63 00 	lds	r24, 0x0063
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	30 f3       	brcs	.-52     	; 0x198 <getSensorValues+0xc>
			if(getADCValue(temp2) > LINE_SENSOR_THRESHHOLD_ADC )
				temp1|=1<<temp2;
		
	//OBST sensors
		for(temp2=2;temp2<4;temp2++)
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	14 c0       	rjmp	.+40     	; 0x1f8 <getSensorValues+0x6c>
			if(getADCValue(temp2) > OBS_SENSOR_THRESHHOLD_ADC )
 1d0:	d1 df       	rcall	.-94     	; 0x174 <getADCValue>
 1d2:	81 35       	cpi	r24, 0x51	; 81
 1d4:	70 f0       	brcs	.+28     	; 0x1f2 <getSensorValues+0x66>
				temp1|=1<<temp2;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	00 90 63 00 	lds	r0, 0x0063
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <getSensorValues+0x58>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <getSensorValues+0x54>
 1e8:	20 91 66 00 	lds	r18, 0x0066
 1ec:	28 2b       	or	r18, r24
 1ee:	20 93 66 00 	sts	0x0066, r18
		for(temp2=0;temp2<2;temp2++)
			if(getADCValue(temp2) > LINE_SENSOR_THRESHHOLD_ADC )
				temp1|=1<<temp2;
		
	//OBST sensors
		for(temp2=2;temp2<4;temp2++)
 1f2:	80 91 63 00 	lds	r24, 0x0063
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 63 00 	sts	0x0063, r24
 1fc:	80 91 63 00 	lds	r24, 0x0063
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	30 f3       	brcs	.-52     	; 0x1d0 <getSensorValues+0x44>
			if(getADCValue(temp2) > OBS_SENSOR_THRESHHOLD_ADC )
				temp1|=1<<temp2;
	
		ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
 204:	16 b8       	out	0x06, r1	; 6
 206:	80 91 66 00 	lds	r24, 0x0066
		return temp1;

}
 20a:	99 27       	eor	r25, r25
 20c:	08 95       	ret

0000020e <main>:
uint8_t temp1,temp2,makeRandomPWMflag=0,sensorInput ;
uint8_t g_TOP_PWM=160;
uint8_t temp;

int main()
{
 20e:	cf e5       	ldi	r28, 0x5F	; 95
 210:	d4 e0       	ldi	r29, 0x04	; 4
 212:	de bf       	out	0x3e, r29	; 62
 214:	cd bf       	out	0x3d, r28	; 61
	

	initVariables();	
 216:	31 df       	rcall	.-414    	; 0x7a <initVariables>
	
	
while(1)
	{
		//sensorInput = PINC;
	sensorInput=getSensorValues();
 218:	b9 df       	rcall	.-142    	; 0x18c <getSensorValues>
	sensorInput=~sensorInput;
 21a:	80 95       	com	r24
 21c:	80 93 64 00 	sts	0x0064, r24
		//temp = (( sensorInput ^ 0x0C) & FOUR_SENSOR_MASK );
		temp = ( sensorInput  & FOUR_SENSOR_MASK );
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	80 93 65 00 	sts	0x0065, r24
		
	switch(temp)
 226:	99 27       	eor	r25, r25
 228:	aa 27       	eor	r26, r26
 22a:	bb 27       	eor	r27, r27
 22c:	fc 01       	movw	r30, r24
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	ee 30       	cpi	r30, 0x0E	; 14
 232:	f1 05       	cpc	r31, r1
 234:	a8 f4       	brcc	.+42     	; 0x260 <main+0x52>
 236:	ed 5e       	subi	r30, 0xED	; 237
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	09 94       	ijmp
				break;

		 case 1<<BACK_LINE_SENSOR  : // only Back Sensor Detects
		 case (1<<BACK_LINE_SENSOR | 1<<BACK_OBST_SENSOR) :
	     case (1<<BACK_LINE_SENSOR | 1<<FRONT_OBST_SENSOR | 1<<BACK_OBST_SENSOR) :
				makeRandomPWMflag = 0;
 23c:	10 92 62 00 	sts	0x0062, r1
		 		MOTOR_OUTPUT  = MOTOR_OUTPUT_FRONT;//move forward with random PWMs
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	82 bb       	out	0x12, r24	; 18
 244:	16 c0       	rjmp	.+44     	; 0x272 <main+0x64>
		 		makeRandomPWMflag=0;
		 		MOTOR_OUTPUT  = MOTOR_OUTPUT_FRONT;//move front with full PWM
				break;

		 case 1<<BACK_OBST_SENSOR :
		 		makeRandomPWMflag=0;//move back with full PWM
 246:	10 92 62 00 	sts	0x0062, r1
				MOTOR_OUTPUT  = MOTOR_OUTPUT_BACK;
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	fa cf       	rjmp	.-12     	; 0x242 <main+0x34>
				break;

		 case (1<<BACK_OBST_SENSOR) | (1<<FRONT_LINE_SENSOR ) :
		 		RotateRobotAtCornor();//rotate robot at corners
 24e:	6f df       	rcall	.-290    	; 0x12e <RotateRobotAtCornor>
				MOTOR_OUTPUT  = MOTOR_OUTPUT_FRONT;
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x4a>
				makeRandomPWMflag = 0;
				break;
		 case (1<<FRONT_OBST_SENSOR) | (1<<BACK_LINE_SENSOR ) :
		 		RotateRobotAtCornor();//rotate robot at corners
 254:	6c df       	rcall	.-296    	; 0x12e <RotateRobotAtCornor>
				MOTOR_OUTPUT  = MOTOR_OUTPUT_BACK;
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	82 bb       	out	0x12, r24	; 18
				makeRandomPWMflag = 0;
 25a:	10 92 62 00 	sts	0x0062, r1
 25e:	09 c0       	rjmp	.+18     	; 0x272 <main+0x64>
				break;

		 default ://random move
		 	if(!makeRandomPWMflag) 
 260:	80 91 62 00 	lds	r24, 0x0062
 264:	88 23       	and	r24, r24
 266:	11 f4       	brne	.+4      	; 0x26c <main+0x5e>
			{
				LED_ON;
 268:	c0 9a       	sbi	0x18, 0	; 24
				MakePWMrandom();
 26a:	2d df       	rcall	.-422    	; 0xc6 <MakePWMrandom>
				
			}
			makeRandomPWMflag = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 62 00 	sts	0x0062, r24
		}//end of switch
	
		if(!makeRandomPWMflag)
 272:	80 91 62 00 	lds	r24, 0x0062
 276:	88 23       	and	r24, r24
 278:	79 f6       	brne	.-98     	; 0x218 <main+0xa>
			{
				LED_OFF;
 27a:	c0 98       	cbi	0x18, 0	; 24
				// give maximum PWM to motors	
				RIGHT_MOTOR_PWM = g_TOP_PWM;
 27c:	80 91 60 00 	lds	r24, 0x0060
 280:	99 27       	eor	r25, r25
 282:	9b bd       	out	0x2b, r25	; 43
 284:	8a bd       	out	0x2a, r24	; 42
				LEFT_MOTOR_PWM	= g_TOP_PWM;
 286:	99 bd       	out	0x29, r25	; 41
 288:	88 bd       	out	0x28, r24	; 40
 28a:	c6 cf       	rjmp	.-116    	; 0x218 <main+0xa>

0000028c <__divmodhi4>:
 28c:	97 fb       	bst	r25, 7
 28e:	09 2e       	mov	r0, r25
 290:	07 26       	eor	r0, r23
 292:	0a d0       	rcall	.+20     	; 0x2a8 <__divmodhi4_neg1>
 294:	77 fd       	sbrc	r23, 7
 296:	04 d0       	rcall	.+8      	; 0x2a0 <__divmodhi4_neg2>
 298:	0c d0       	rcall	.+24     	; 0x2b2 <__udivmodhi4>
 29a:	06 d0       	rcall	.+12     	; 0x2a8 <__divmodhi4_neg1>
 29c:	00 20       	and	r0, r0
 29e:	1a f4       	brpl	.+6      	; 0x2a6 <__divmodhi4_exit>

000002a0 <__divmodhi4_neg2>:
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255

000002a6 <__divmodhi4_exit>:
 2a6:	08 95       	ret

000002a8 <__divmodhi4_neg1>:
 2a8:	f6 f7       	brtc	.-4      	; 0x2a6 <__divmodhi4_exit>
 2aa:	90 95       	com	r25
 2ac:	81 95       	neg	r24
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__udivmodhi4>:
 2b2:	aa 1b       	sub	r26, r26
 2b4:	bb 1b       	sub	r27, r27
 2b6:	51 e1       	ldi	r21, 0x11	; 17
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__udivmodhi4_ep>

000002ba <__udivmodhi4_loop>:
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	a6 17       	cp	r26, r22
 2c0:	b7 07       	cpc	r27, r23
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <__udivmodhi4_ep>
 2c4:	a6 1b       	sub	r26, r22
 2c6:	b7 0b       	sbc	r27, r23

000002c8 <__udivmodhi4_ep>:
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	5a 95       	dec	r21
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <__udivmodhi4_loop>
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25
 2d4:	bc 01       	movw	r22, r24
 2d6:	cd 01       	movw	r24, r26
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <_exit>
