Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
                              sumoTry.o (__divmodhi4)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                              sumoTry.o (__do_copy_data)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                              sumoTry.o (__do_clear_bss)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o) (__udivmodhi4)

Allocating common symbols
Common symbol       size              file

temp2               0x1               sumoTry.o
sensorInput         0x1               sumoTry.o
temp                0x1               sumoTry.o
temp1               0x1               sumoTry.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
LOAD sumoTry.o
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libm.a
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x2dc
 *(.vectors)
 .vectors       0x00000000       0x26 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 .progmem.gcc_sw_table
                0x00000026       0x1c sumoTry.o
 *(.progmem*)
                0x00000042                . = ALIGN (0x2)
                0x00000042                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000042        0x0 linker stubs
 *(.trampolines*)
                0x00000042                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000042                __ctors_start = .
 *(.ctors)
                0x00000042                __ctors_end = .
                0x00000042                __dtors_start = .
 *(.dtors)
                0x00000042                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000042        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x00000042                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000042        0xc /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000004e       0x16 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                0x0000004e                __do_copy_data
 .init4         0x00000064       0x10 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                0x00000064                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000074        0x4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x00000078        0x2 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x00000078                __vector_1
                0x00000078                __vector_12
                0x00000078                __bad_interrupt
                0x00000078                __vector_6
                0x00000078                __vector_3
                0x00000078                __vector_11
                0x00000078                __vector_13
                0x00000078                __vector_17
                0x00000078                __vector_7
                0x00000078                __vector_5
                0x00000078                __vector_4
                0x00000078                __vector_9
                0x00000078                __vector_2
                0x00000078                __vector_15
                0x00000078                __vector_8
                0x00000078                __vector_14
                0x00000078                __vector_10
                0x00000078                __vector_16
                0x00000078                __vector_18
 .text          0x0000007a      0x212 sumoTry.o
                0x000000c6                MakePWMrandom
                0x0000012e                RotateRobotAtCornor
                0x0000018c                getSensorValues
                0x0000007a                initVariables
                0x0000020e                main
                0x00000174                getADCValue
                0x000000a4                RandomNumGenerator
 .text          0x0000028c        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
 .text          0x0000028c        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text          0x0000028c        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text          0x0000028c        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .text          0x0000028c        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
                0x0000028c                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000028c       0x26 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
                0x0000028c                __divmodhi4
                0x0000028c                _div
 .text.libgcc   0x000002b2        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x000002b2        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x000002b2        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .text.libgcc   0x000002b2       0x28 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
                0x000002b2                __udivmodhi4
                0x000002da                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000002da        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                0x000002da                exit
                0x000002da                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000002da        0x2 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x000002dc                _etext = .

.data           0x00800060        0x2 load address 0x000002dc
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .data          0x00800060        0x1 sumoTry.o
                0x00800060                g_TOP_PWM
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .data          0x00800061        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800062                . = ALIGN (0x2)
 *fill*         0x00800061        0x1 00
                0x00800062                _edata = .
                0x00800062                PROVIDE (__data_end, .)

.bss            0x00800062        0x5 load address 0x000002de
                0x00800062                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800062        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .bss           0x00800062        0x1 sumoTry.o
                0x00800062                makeRandomPWMflag
 .bss           0x00800063        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
 .bss           0x00800063        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .bss           0x00800063        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .bss           0x00800063        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .bss           0x00800063        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800063        0x4 sumoTry.o
                0x00800063                temp2
                0x00800064                sensorInput
                0x00800065                temp
                0x00800066                temp1
                0x00800067                PROVIDE (__bss_end, .)
                0x000002dc                __data_load_start = LOADADDR (.data)
                0x000002de                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800067        0x0
                0x00800067                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800067                PROVIDE (__noinit_end, .)
                0x00800067                _end = .
                0x00800067                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0xabc
 *(.stab)
 .stab          0x00000000      0x378 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .stab          0x00000378      0x744 sumoTry.o
                                0x750 (size before relaxing)

.stabstr        0x00000000      0x771
 *(.stabstr)
 .stabstr       0x00000000      0x771 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(sumoTry.elf elf32-avr)
LOAD linker stubs

Cross Reference Table

Symbol                                            File
MakePWMrandom                                     sumoTry.o
RandomNumGenerator                                sumoTry.o
RotateRobotAtCornor                               sumoTry.o
__bad_interrupt                                   /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__bss_end                                         /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
__bss_start                                       /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
__data_end                                        /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__data_load_start                                 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__data_start                                      /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__divmodhi4                                       /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
                                                  sumoTry.o
__do_clear_bss                                    /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                                                  sumoTry.o
__do_copy_data                                    /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                                                  sumoTry.o
__heap_end                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__init                                            /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__stack                                           /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                                                  sumoTry.o
__udivmodhi4                                      /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_udivmodhi4.o)
                                                  /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
__vector_1                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_10                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_11                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_12                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_13                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_14                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_15                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_16                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_17                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_18                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_2                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_3                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_4                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_5                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_6                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_7                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_8                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_9                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_default                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vectors                                         /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
_div                                              /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_divmodhi4.o)
_exit                                             /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
exit                                              /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
g_TOP_PWM                                         sumoTry.o
getADCValue                                       sumoTry.o
getSensorValues                                   sumoTry.o
initVariables                                     sumoTry.o
main                                              sumoTry.o
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
makeRandomPWMflag                                 sumoTry.o
sensorInput                                       sumoTry.o
temp                                              sumoTry.o
temp1                                             sumoTry.o
temp2                                             sumoTry.o
