
mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ce  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000093  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001eb  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000096  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000029  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e6       	ldi	r30, 0x62	; 98
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	12 d0       	rcall	.+36     	; 0x7e <main>
  5a:	81 c0       	rjmp	.+258    	; 0x15e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main_initi>:
				
	}
*/

void main_initi()
	{
  5e:	14 ba       	out	0x14, r1	; 20
		DDRC=0x00;
		DDRD=0x1E;
  60:	8e e1       	ldi	r24, 0x1E	; 30
  62:	81 bb       	out	0x11, r24	; 17
		DDRB=0xFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	87 bb       	out	0x17, r24	; 23
		TCCR1A=0xA1;
  68:	81 ea       	ldi	r24, 0xA1	; 161
  6a:	8f bd       	out	0x2f, r24	; 47
		TCCR1B=0x04;
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	8e bd       	out	0x2e, r24	; 46
		RM_PWM=TOP;
  70:	88 ec       	ldi	r24, 0xC8	; 200
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
		LM_PWM=TOP;
  78:	99 bd       	out	0x29, r25	; 41
  7a:	88 bd       	out	0x28, r24	; 40
	}
  7c:	08 95       	ret

0000007e <main>:
		

int main()

{
  7e:	ef 92       	push	r14
  80:	ff 92       	push	r15
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
	}
*/

void main_initi()
	{
		DDRC=0x00;
  86:	14 ba       	out	0x14, r1	; 20
		DDRD=0x1E;
  88:	8e e1       	ldi	r24, 0x1E	; 30
  8a:	81 bb       	out	0x11, r24	; 17
		DDRB=0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
		TCCR1A=0xA1;
  90:	81 ea       	ldi	r24, 0xA1	; 161
  92:	8f bd       	out	0x2f, r24	; 47
		TCCR1B=0x04;
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	8e bd       	out	0x2e, r24	; 46
		RM_PWM=TOP;
  98:	88 ec       	ldi	r24, 0xC8	; 200
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
		LM_PWM=TOP;
  a0:	99 bd       	out	0x29, r25	; 41
  a2:	88 bd       	out	0x28, r24	; 40
	
	else if(input==13)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*6)/10);}
	
	else if(input==14)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*8)/10);}
	
	else if(input==15)	{		RM_PWM=LM_PWM=TOP;}
  a4:	e8 ec       	ldi	r30, 0xC8	; 200
  a6:	f0 e0       	ldi	r31, 0x00	; 0
	
	else if(input==12)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*2)/10);}
	
	else if(input==13)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*6)/10);}
	
	else if(input==14)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*8)/10);}
  a8:	60 ea       	ldi	r22, 0xA0	; 160
  aa:	70 e0       	ldi	r23, 0x00	; 0
	
	else if(input==11)	{		RM_PWM=LM_PWM=0;}
	
	else if(input==12)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*2)/10);}
	
	else if(input==13)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*6)/10);}
  ac:	48 e7       	ldi	r20, 0x78	; 120
  ae:	50 e0       	ldi	r21, 0x00	; 0
	
	else if(input==10)	{		;}
	
	else if(input==11)	{		RM_PWM=LM_PWM=0;}
	
	else if(input==12)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*2)/10);}
  b0:	28 e2       	ldi	r18, 0x28	; 40
  b2:	30 e0       	ldi	r19, 0x00	; 0
	
	else if(input==4)	{		TURN_RIGHT;}
	
	else if(input==5)	{		FLAP_OPEN;}
	
	else if(input==6)	{		FLAP_CLOSE;}
  b4:	90 e1       	ldi	r25, 0x10	; 16
  b6:	e9 2e       	mov	r14, r25
	
	else if(input==3)	{		TURN_LEFT;}
	
	else if(input==4)	{		TURN_RIGHT;}
	
	else if(input==5)	{		FLAP_OPEN;}
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	f8 2e       	mov	r15, r24
	
	else if(input==2)	{		MOV_BACK;}
	
	else if(input==3)	{		TURN_LEFT;}
	
	else if(input==4)	{		TURN_RIGHT;}
  bc:	02 e1       	ldi	r16, 0x12	; 18
	
	else if(input==1)	{		MOV_FORWORD;}
	
	else if(input==2)	{		MOV_BACK;}
	
	else if(input==3)	{		TURN_LEFT;}
  be:	1c e0       	ldi	r17, 0x0C	; 12
	
	if(input==0)	    {		STOP;}
	
	else if(input==1)	{		MOV_FORWORD;}
	
	else if(input==2)	{		MOV_BACK;}
  c0:	ba e0       	ldi	r27, 0x0A	; 10
 {
	input=INPUT;
	
	if(input==0)	    {		STOP;}
	
	else if(input==1)	{		MOV_FORWORD;}
  c2:	a4 e1       	ldi	r26, 0x14	; 20
	uint8_t input;
	uint16_t topPWM=TOP;
	
while(1)
 {
	input=INPUT;
  c4:	83 b3       	in	r24, 0x13	; 19
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	8c 73       	andi	r24, 0x3C	; 60
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
	
	if(input==0)	    {		STOP;}
  d4:	88 23       	and	r24, r24
  d6:	11 f4       	brne	.+4      	; 0xdc <main+0x5e>
  d8:	12 ba       	out	0x12, r1	; 18
  da:	1a c0       	rjmp	.+52     	; 0x110 <main+0x92>
	
	else if(input==1)	{		MOV_FORWORD;}
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	11 f4       	brne	.+4      	; 0xe4 <main+0x66>
  e0:	a2 bb       	out	0x12, r26	; 18
  e2:	f0 cf       	rjmp	.-32     	; 0xc4 <main+0x46>
	
	else if(input==2)	{		MOV_BACK;}
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x6e>
  e8:	b2 bb       	out	0x12, r27	; 18
  ea:	ec cf       	rjmp	.-40     	; 0xc4 <main+0x46>
	
	else if(input==3)	{		TURN_LEFT;}
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	11 f4       	brne	.+4      	; 0xf4 <main+0x76>
  f0:	12 bb       	out	0x12, r17	; 18
  f2:	e8 cf       	rjmp	.-48     	; 0xc4 <main+0x46>
	
	else if(input==4)	{		TURN_RIGHT;}
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	11 f4       	brne	.+4      	; 0xfc <main+0x7e>
  f8:	02 bb       	out	0x12, r16	; 18
  fa:	e4 cf       	rjmp	.-56     	; 0xc4 <main+0x46>
	
	else if(input==5)	{		FLAP_OPEN;}
  fc:	85 30       	cpi	r24, 0x05	; 5
  fe:	11 f4       	brne	.+4      	; 0x104 <main+0x86>
 100:	f8 ba       	out	0x18, r15	; 24
 102:	e0 cf       	rjmp	.-64     	; 0xc4 <main+0x46>
	
	else if(input==6)	{		FLAP_CLOSE;}
 104:	86 30       	cpi	r24, 0x06	; 6
 106:	11 f4       	brne	.+4      	; 0x10c <main+0x8e>
 108:	e8 ba       	out	0x18, r14	; 24
 10a:	dc cf       	rjmp	.-72     	; 0xc4 <main+0x46>
	
	else if(input==7)	{		HOLD_FLAP;}
 10c:	87 30       	cpi	r24, 0x07	; 7
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x96>
 110:	18 ba       	out	0x18, r1	; 24
 112:	d8 cf       	rjmp	.-80     	; 0xc4 <main+0x46>
	
	else if(input==8)	{		;}
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	b1 f2       	breq	.-84     	; 0xc4 <main+0x46>
	
	else if(input==9)	{		;}
 118:	89 30       	cpi	r24, 0x09	; 9
 11a:	a1 f2       	breq	.-88     	; 0xc4 <main+0x46>
	
	else if(input==10)	{		;}
 11c:	8a 30       	cpi	r24, 0x0A	; 10
 11e:	91 f2       	breq	.-92     	; 0xc4 <main+0x46>
	
	else if(input==11)	{		RM_PWM=LM_PWM=0;}
 120:	8b 30       	cpi	r24, 0x0B	; 11
 122:	19 f4       	brne	.+6      	; 0x12a <main+0xac>
 124:	19 bc       	out	0x29, r1	; 41
 126:	18 bc       	out	0x28, r1	; 40
 128:	15 c0       	rjmp	.+42     	; 0x154 <main+0xd6>
	
	else if(input==12)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*2)/10);}
 12a:	8c 30       	cpi	r24, 0x0C	; 12
 12c:	19 f4       	brne	.+6      	; 0x134 <main+0xb6>
 12e:	3b bd       	out	0x2b, r19	; 43
 130:	2a bd       	out	0x2a, r18	; 42
 132:	09 c0       	rjmp	.+18     	; 0x146 <main+0xc8>
	
	else if(input==13)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*6)/10);}
 134:	8d 30       	cpi	r24, 0x0D	; 13
 136:	19 f4       	brne	.+6      	; 0x13e <main+0xc0>
 138:	5b bd       	out	0x2b, r21	; 43
 13a:	4a bd       	out	0x2a, r20	; 42
 13c:	04 c0       	rjmp	.+8      	; 0x146 <main+0xc8>
	
	else if(input==14)	{		LM_PWM=RM_PWM=(uint8_t)((topPWM*8)/10);}
 13e:	8e 30       	cpi	r24, 0x0E	; 14
 140:	39 f4       	brne	.+14     	; 0x150 <main+0xd2>
 142:	7b bd       	out	0x2b, r23	; 43
 144:	6a bd       	out	0x2a, r22	; 42
 146:	8a b5       	in	r24, 0x2a	; 42
 148:	9b b5       	in	r25, 0x2b	; 43
 14a:	99 bd       	out	0x29, r25	; 41
 14c:	88 bd       	out	0x28, r24	; 40
 14e:	ba cf       	rjmp	.-140    	; 0xc4 <main+0x46>
	
	else if(input==15)	{		RM_PWM=LM_PWM=TOP;}
 150:	f9 bd       	out	0x29, r31	; 41
 152:	e8 bd       	out	0x28, r30	; 40
 154:	88 b5       	in	r24, 0x28	; 40
 156:	99 b5       	in	r25, 0x29	; 41
 158:	9b bd       	out	0x2b, r25	; 43
 15a:	8a bd       	out	0x2a, r24	; 42
 15c:	b3 cf       	rjmp	.-154    	; 0xc4 <main+0x46>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
