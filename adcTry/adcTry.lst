   1               		.file	"adcTry.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  68               	.global	calc
  70               	calc:
   1:adcTry.c      **** 	/*
   2:adcTry.c      **** 	
   3:adcTry.c      **** 	put adc code...
   4:adcTry.c      **** 
   5:adcTry.c      **** 	check 
   6:adcTry.c      **** 
   7:adcTry.c      **** 	oc1a left now....
   8:adcTry.c      **** 
   9:adcTry.c      **** 		*/
  10:adcTry.c      **** 	
  11:adcTry.c      **** 	#include <avr/io.h> //header file to include input output port
  12:adcTry.c      **** 
  13:adcTry.c      **** 	#include <util/delay.h>
  14:adcTry.c      **** 
  15:adcTry.c      **** 	/*port D as input PORT
  16:adcTry.c      **** 			2	  1  	0
  17:adcTry.c      **** 	      left        right 
  18:adcTry.c      **** 	  for line follower (on line=,not on line=) */
  19:adcTry.c      **** 	
  20:adcTry.c      **** //	#define  SENSOR_INPUTS (~PINC) 
  21:adcTry.c      **** 
  22:adcTry.c      **** 	//#define  CHECK_SENSORS_INPUTS (PINC) 
  23:adcTry.c      **** 	
  24:adcTry.c      **** 	/* 
  25:adcTry.c      **** 	At hardware level ( from comparator output ) we are getting 1 for white surface and 0 for black on
  26:adcTry.c      **** 	but we have black line and we also want line be taken as 1 thus we use NOT(~) before inputs.
  27:adcTry.c      ****  
  28:adcTry.c      **** 	*/
  29:adcTry.c      **** 		
  30:adcTry.c      **** 	#define  M_OUTPUT PORTD
  31:adcTry.c      **** 		
  32:adcTry.c      **** 	/*port B as output PORT*/
  33:adcTry.c      **** 		
  34:adcTry.c      **** 	uint8_t MASTER_PWM;
  35:adcTry.c      **** 	/* We set MASTER_PWM inversely proportional to battery voltage,
  36:adcTry.c      **** 	its also define the overall speed of line follower robot.
  37:adcTry.c      **** 	*/
  38:adcTry.c      **** 	//uint8_t PERCENTAGE_LEFT_PWM,PERCENTAGE_RIGHT_PWM;
  39:adcTry.c      **** 	// shows percentage PWM of left and right motor
  40:adcTry.c      **** 
  41:adcTry.c      **** 	//uint8_t PERCENTAGE_PWM_STEP_SIZE=10;
  42:adcTry.c      **** 	/* PERCENTAGE_PWM_STEP_SIZE shows,steps size we are increasing our PWM of each motor*/
  43:adcTry.c      ****  
  44:adcTry.c      **** 	//uint8_t M_OUTPUT=0;	
  45:adcTry.c      **** 	
  46:adcTry.c      **** 
  47:adcTry.c      **** 	uint8_t calc(uint8_t w)
  48:adcTry.c      **** 	{
  72               	.LM0:
  73               	.LFBB1:
  74               	/* prologue: frame size=0 */
  75               	/* prologue end (size=0) */
  49:adcTry.c      **** 		//put adc code here...
  50:adcTry.c      **** 		ADCSRA&=~(1<<ADIF);
  77               	.LM1:
  78 0000 3498      		cbi 38-0x20,4
  51:adcTry.c      **** 	ADMUX=w;
  80               	.LM2:
  81 0002 87B9      		out 39-0x20,r24
  52:adcTry.c      **** 	ADMUX|=_BV(ADLAR);
  83               	.LM3:
  84 0004 3D9A      		sbi 39-0x20,5
  53:adcTry.c      **** 	//start conversion
  54:adcTry.c      **** 	ADCSRA|=_BV(ADEN);
  86               	.LM4:
  87 0006 379A      		sbi 38-0x20,7
  55:adcTry.c      **** 	ADCSRA|=(_BV(ADPS2) | _BV(ADPS1) );
  89               	.LM5:
  90 0008 86B1      		in r24,38-0x20
  91 000a 8660      		ori r24,lo8(6)
  92 000c 86B9      		out 38-0x20,r24
  56:adcTry.c      **** 	ADCSRA|= (1<<ADSC);
  94               	.LM6:
  95 000e 369A      		sbi 38-0x20,6
  96               	.L2:
  57:adcTry.c      **** 	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
  98               	.LM7:
  99 0010 349B      		sbis 38-0x20,4
 100 0012 00C0      		rjmp .L2
  58:adcTry.c      **** 	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
 102               	.LM8:
 103 0014 16B8      		out 38-0x20,__zero_reg__
  59:adcTry.c      **** 	return ADCH;
 105               	.LM9:
 106 0016 85B1      		in r24,37-0x20
  60:adcTry.c      **** 
  61:adcTry.c      **** 
  62:adcTry.c      **** 	//	return 0x0;		//change here
  63:adcTry.c      **** 	}	
 108               	.LM10:
 109 0018 9927      		clr r25
 110               	/* epilogue: frame size=0 */
 111 001a 0895      		ret
 112               	/* epilogue end (size=1) */
 113               	/* function calc size 14 (13) */
 115               	.Lscope1:
 117               	.global	main
 119               	main:
  64:adcTry.c      **** 	
  65:adcTry.c      **** int main()
  66:adcTry.c      **** {
 121               	.LM11:
 122               	.LFBB2:
 123               	/* prologue: frame size=0 */
 124 001c C0E0      		ldi r28,lo8(__stack - 0)
 125 001e D0E0      		ldi r29,hi8(__stack - 0)
 126 0020 DEBF      		out __SP_H__,r29
 127 0022 CDBF      		out __SP_L__,r28
 128               	/* prologue end (size=4) */
  67:adcTry.c      **** 			uint8_t Actual_input=0b00100,LAST_INPUT=0b101010,count,temp;	
  68:adcTry.c      **** 			
  69:adcTry.c      **** 			DDRD=0b00001111; 
 130               	.LM12:
 131 0024 8FE0      		ldi r24,lo8(15)
 132 0026 81BB      		out 49-0x20,r24
  70:adcTry.c      **** 			DDRB=0xff;
 134               	.LM13:
 135 0028 2FEF      		ldi r18,lo8(-1)
 136 002a 27BB      		out 55-0x20,r18
  71:adcTry.c      **** 			PORTB=0x0;
 138               	.LM14:
 139 002c 18BA      		out 56-0x20,__zero_reg__
  72:adcTry.c      **** 			PORTD=0b1111;
 141               	.LM15:
 142 002e 82BB      		out 50-0x20,r24
  73:adcTry.c      **** 
  74:adcTry.c      **** 		//	DDRC=0b11100000;  
  75:adcTry.c      **** 
  76:adcTry.c      **** 		OCR1A=0xff;   // output compare register  for right motor  
 144               	.LM16:
 145 0030 8FEF      		ldi r24,lo8(255)
 146 0032 90E0      		ldi r25,hi8(255)
 147 0034 9BBD      		out (74)+1-0x20,r25
 148 0036 8ABD      		out 74-0x20,r24
  77:adcTry.c      **** 		OCR1B=0xff;	// output compare register  for left motor
 150               	.LM17:
 151 0038 99BD      		out (72)+1-0x20,r25
 152 003a 88BD      		out 72-0x20,r24
  78:adcTry.c      **** 		
  79:adcTry.c      **** 
  80:adcTry.c      **** 
  81:adcTry.c      **** 		/* TOP value is 00FFh for both OCR1A and OCR1B*/
  82:adcTry.c      **** 
  83:adcTry.c      **** 		TCCR1A=0xA1;	// define type of PWM	
 154               	.LM18:
 155 003c 81EA      		ldi r24,lo8(-95)
 156 003e 8FBD      		out 79-0x20,r24
  84:adcTry.c      **** 
  85:adcTry.c      **** 		/*Timer/Counter 1 Control  and pwm at pin OCR1A(PB1) */
  86:adcTry.c      **** 
  87:adcTry.c      **** 		TCCR1B=0x01; //for start pwm
 158               	.LM19:
 159 0040 81E0      		ldi r24,lo8(1)
 160 0042 8EBD      		out 78-0x20,r24
  88:adcTry.c      **** 		
  89:adcTry.c      **** 
  90:adcTry.c      **** 		/* pwm at pin OCR1B(PB2) and clock freq. of timer(3 LSB 000 sys. clock) */ 
  91:adcTry.c      **** 			/*maximum MASTER_PWM value can be 00FFh */
  92:adcTry.c      **** 
  93:adcTry.c      **** 		MASTER_PWM=255;
 162               	.LM20:
 163 0044 2093 0000 		sts MASTER_PWM,r18
 164 0048 1AE2      		ldi r17,lo8(42)
 165 004a 00C0      		rjmp .L33
 166               	.L9:
 168               	.LM21:
 169 004c 142F      		mov r17,r20
 170               	.L33:
 171 004e 00E0      		ldi r16,lo8(0)
 172 0050 C0E0      		ldi r28,lo8(0)
 173 0052 D0E0      		ldi r29,hi8(0)
 174               	.L10:
  94:adcTry.c      **** 
  95:adcTry.c      **** 		//PERCENTAGE_LEFT_PWM=100;
  96:adcTry.c      **** 
  97:adcTry.c      **** 	//	PERCENTAGE_RIGHT_PWM=100;
  98:adcTry.c      **** 
  99:adcTry.c      **** 				
 100:adcTry.c      **** 			
 101:adcTry.c      **** line_following:
 102:adcTry.c      **** 		
 103:adcTry.c      **** 	//	Actual_input=SENSOR_INPUTS;		//check
 104:adcTry.c      **** 
 105:adcTry.c      **** 		Actual_input=0x0;
 106:adcTry.c      **** 		for(count=0;count<=4;count++)
 107:adcTry.c      **** 		{
 108:adcTry.c      **** 			if(calc(count)>130)		//check
 176               	.LM22:
 177 0054 8C2F      		mov r24,r28
 178 0056 00D0      		rcall calc
 179 0058 8338      		cpi r24,lo8(-125)
 180 005a 00F0      		brlo .L11
 109:adcTry.c      **** 			{
 110:adcTry.c      **** 				Actual_input|=0x01<<count;
 182               	.LM23:
 183 005c 81E0      		ldi r24,lo8(1)
 184 005e 90E0      		ldi r25,hi8(1)
 185 0060 0C2E      		mov r0,r28
 186 0062 00C0      		rjmp 2f
 187 0064 880F      	1:	lsl r24
 188 0066 991F      		rol r25
 189 0068 0A94      	2:	dec r0
 190 006a 02F4      		brpl 1b
 191 006c 082B      		or r16,r24
 192               	.L11:
 193 006e 2196      		adiw r28,1
 195               	.LM24:
 196 0070 C530      		cpi r28,5
 197 0072 D105      		cpc r29,__zero_reg__
 198 0074 01F4      		brne .L10
 111:adcTry.c      **** 			}
 112:adcTry.c      **** 		}
 113:adcTry.c      **** 
 114:adcTry.c      **** 		Actual_input&=0b11111;
 200               	.LM25:
 201 0076 402F      		mov r20,r16
 202 0078 4F71      		andi r20,lo8(31)
 115:adcTry.c      **** 
 116:adcTry.c      **** 
 117:adcTry.c      **** 		//if same input from sensor then no need to calculate PWM just follow as last
 118:adcTry.c      **** 		if(LAST_INPUT==Actual_input)goto line_following;
 204               	.LM26:
 205 007a 1417      		cp r17,r20
 206 007c 01F0      		breq .L33
 119:adcTry.c      **** 		
 120:adcTry.c      **** 	
 121:adcTry.c      **** 	
 122:adcTry.c      **** 		
 123:adcTry.c      **** 	//	Actual_input^=0xff;
 124:adcTry.c      **** 	temp=~Actual_input;
 208               	.LM27:
 209 007e 842F      		mov r24,r20
 210 0080 8095      		com r24
 125:adcTry.c      **** 	temp&=0b11111;
 126:adcTry.c      **** 
 127:adcTry.c      **** 	switch(temp)
 212               	.LM28:
 213 0082 9927      		clr r25
 214 0084 AA27      		clr r26
 215 0086 BB27      		clr r27
 216 0088 8F71      		andi r24,lo8(31)
 217 008a 9070      		andi r25,hi8(31)
 218 008c A070      		andi r26,hlo8(31)
 219 008e B070      		andi r27,hhi8(31)
 220 0090 FC01      		movw r30,r24
 221 0092 8097      		sbiw r24,32
 222 0094 00F4      		brsh .L9
 223 0096 E050      		subi r30,lo8(-(pm(.L22)))
 224 0098 F040      		sbci r31,hi8(-(pm(.L22)))
 225 009a 0994      		ijmp
 226               		.data
 227               		.section .progmem.gcc_sw_table, "ax", @progbits
 228               		.p2align 1
 229               	.L22:
 230               		.data
 231               		.section .progmem.gcc_sw_table, "ax", @progbits
 232               		.p2align 1
 233 0000 00C0      		rjmp .L15
 234 0002 00C0      		rjmp .L16
 235 0004 00C0      		rjmp .L17
 236 0006 00C0      		rjmp .L16
 237 0008 00C0      		rjmp .L17
 238 000a 00C0      		rjmp .L9
 239 000c 00C0      		rjmp .L17
 240 000e 00C0      		rjmp .L18
 241 0010 00C0      		rjmp .L17
 242 0012 00C0      		rjmp .L18
 243 0014 00C0      		rjmp .L9
 244 0016 00C0      		rjmp .L18
 245 0018 00C0      		rjmp .L17
 246 001a 00C0      		rjmp .L9
 247 001c 00C0      		rjmp .L17
 248 001e 00C0      		rjmp .L9
 249 0020 00C0      		rjmp .L19
 250 0022 00C0      		rjmp .L18
 251 0024 00C0      		rjmp .L18
 252 0026 00C0      		rjmp .L18
 253 0028 00C0      		rjmp .L9
 254 002a 00C0      		rjmp .L9
 255 002c 00C0      		rjmp .L9
 256 002e 00C0      		rjmp .L18
 257 0030 00C0      		rjmp .L19
 258 0032 00C0      		rjmp .L18
 259 0034 00C0      		rjmp .L18
 260 0036 00C0      		rjmp .L18
 261 0038 00C0      		rjmp .L20
 262 003a 00C0      		rjmp .L18
 263 003c 00C0      		rjmp .L9
 264 003e 00C0      		rjmp .L21
 265               		.text
 266               	.L17:
 128:adcTry.c      **** 	{
 129:adcTry.c      **** 	
 130:adcTry.c      **** 		case 0b00000100: // forward			done
 131:adcTry.c      **** 		case 0b00001000: 
 132:adcTry.c      **** 		case 0b00000010: 
 133:adcTry.c      **** 		case 0b00000110:  
 134:adcTry.c      **** 		case 0b00001100:  
 135:adcTry.c      **** 		case 0b00001110:  
 136:adcTry.c      **** 			//	case 0b00011110:
 137:adcTry.c      **** 	//	case 0b00011100: //
 138:adcTry.c      **** 		 	
 139:adcTry.c      **** 			
 140:adcTry.c      ****             M_OUTPUT=0b1010;			 //	output for motors
 268               	.LM29:
 269 009c 8AE0      		ldi r24,lo8(10)
 270 009e 82BB      		out 50-0x20,r24
 141:adcTry.c      **** 			OCR1A=(MASTER_PWM*80/100);   // enable for right
 272               	.LM30:
 273 00a0 9091 0000 		lds r25,MASTER_PWM
 274 00a4 80E5      		ldi r24,lo8(80)
 275 00a6 989F      		mul r25,r24
 276 00a8 C001      		movw r24,r0
 277 00aa 1124      		clr r1
 278 00ac 64E6      		ldi r22,lo8(100)
 279 00ae 70E0      		ldi r23,hi8(100)
 280 00b0 00D0      		rcall __divmodhi4
 281 00b2 7BBD      		out (74)+1-0x20,r23
 282 00b4 6ABD      		out 74-0x20,r22
 283 00b6 00C0      		rjmp .L29
 284               	.L15:
 142:adcTry.c      **** 			OCR1B=(MASTER_PWM*80/100);	 // enable for left
 143:adcTry.c      **** 			break; 
 144:adcTry.c      **** 
 145:adcTry.c      **** 		case 0b00000000: 
 146:adcTry.c      **** 
 147:adcTry.c      **** 			M_OUTPUT=0b1001;
 286               	.LM31:
 287 00b8 89E0      		ldi r24,lo8(9)
 288 00ba 00C0      		rjmp .L30
 289               	.L21:
 148:adcTry.c      **** 			OCR1A=(MASTER_PWM*100/100); 
 149:adcTry.c      **** 			OCR1B=(MASTER_PWM*100/100);
 150:adcTry.c      **** 			break;
 151:adcTry.c      **** 		
 152:adcTry.c      **** 		case 0b00011111:
 153:adcTry.c      **** 			M_OUTPUT=0b0110;
 291               	.LM32:
 292 00bc 86E0      		ldi r24,lo8(6)
 293               	.L30:
 294 00be 82BB      		out 50-0x20,r24
 154:adcTry.c      **** 			OCR1A=(MASTER_PWM*100/100); 
 296               	.LM33:
 297 00c0 8091 0000 		lds r24,MASTER_PWM
 298 00c4 9927      		clr r25
 299 00c6 9BBD      		out (74)+1-0x20,r25
 300 00c8 8ABD      		out 74-0x20,r24
 155:adcTry.c      **** 			OCR1B=(MASTER_PWM*100/100);
 302               	.LM34:
 303 00ca 99BD      		out (72)+1-0x20,r25
 304 00cc 88BD      		out 72-0x20,r24
 305 00ce 00C0      		rjmp .L9
 306               	.L16:
 156:adcTry.c      **** 			break;
 157:adcTry.c      **** 
 158:adcTry.c      **** 		case 0b00000001: // sharp right		done
 159:adcTry.c      **** 		case 0b00000011:
 160:adcTry.c      **** 	
 161:adcTry.c      **** 	//	case 0b00001111: // 
 162:adcTry.c      **** 		//case 0b00000111: // 
 163:adcTry.c      **** 		
 164:adcTry.c      **** 			M_OUTPUT=0b1001;
 308               	.LM35:
 309 00d0 89E0      		ldi r24,lo8(9)
 310 00d2 82BB      		out 50-0x20,r24
 165:adcTry.c      **** 			OCR1A=(MASTER_PWM*50/100); 
 312               	.LM36:
 313 00d4 2091 0000 		lds r18,MASTER_PWM
 314 00d8 3327      		clr r19
 315 00da C901      		movw r24,r18
 316 00dc 62E0      		ldi r22,lo8(2)
 317 00de 70E0      		ldi r23,hi8(2)
 318 00e0 00D0      		rcall __divmodhi4
 319 00e2 7BBD      		out (74)+1-0x20,r23
 320 00e4 6ABD      		out 74-0x20,r22
 166:adcTry.c      **** 			OCR1B=(MASTER_PWM*70/100);
 322               	.LM37:
 323 00e6 86E4      		ldi r24,lo8(70)
 324 00e8 90E0      		ldi r25,hi8(70)
 325 00ea 00C0      		rjmp .L32
 326               	.L19:
 167:adcTry.c      **** 			break;
 168:adcTry.c      **** 
 169:adcTry.c      **** 
 170:adcTry.c      **** 		case 0b00010000:// sharp left			done
 171:adcTry.c      **** 		case 0b00011000:
 172:adcTry.c      **** 
 173:adcTry.c      **** 
 174:adcTry.c      **** 			M_OUTPUT=0b0110;
 328               	.LM38:
 329 00ec 86E0      		ldi r24,lo8(6)
 330 00ee 82BB      		out 50-0x20,r24
 175:adcTry.c      **** 			OCR1A=(MASTER_PWM*60/100); 
 332               	.LM39:
 333 00f0 2091 0000 		lds r18,MASTER_PWM
 334 00f4 3327      		clr r19
 335 00f6 8CE3      		ldi r24,lo8(60)
 336 00f8 90E0      		ldi r25,hi8(60)
 337 00fa BC01      		movw r22,r24
 338 00fc 269F      		mul r18,r22
 339 00fe C001      		movw r24,r0
 340 0100 279F      		mul r18,r23
 341 0102 900D      		add r25,r0
 342 0104 369F      		mul r19,r22
 343 0106 900D      		add r25,r0
 344 0108 1124      		clr r1
 345 010a 64E6      		ldi r22,lo8(100)
 346 010c 70E0      		ldi r23,hi8(100)
 347 010e 00D0      		rcall __divmodhi4
 348 0110 7BBD      		out (74)+1-0x20,r23
 349 0112 6ABD      		out 74-0x20,r22
 176:adcTry.c      **** 			OCR1B=(MASTER_PWM*40/100);
 351               	.LM40:
 352 0114 88E2      		ldi r24,lo8(40)
 353 0116 90E0      		ldi r25,hi8(40)
 354 0118 00C0      		rjmp .L32
 355               	.L18:
 177:adcTry.c      **** 			break;		
 178:adcTry.c      **** 			//*
 179:adcTry.c      **** 					
 180:adcTry.c      **** 		case 0b00000111:// sharp right with at slower speed   
 181:adcTry.c      **** 		// this may occur during larger turns( >135 degrees) or it may be noise therefor we set our
 182:adcTry.c      **** 		
 183:adcTry.c      **** 		
 184:adcTry.c      **** 		case 0b00010011: 	//some casses just immediately after nodes
 185:adcTry.c      **** 		
 186:adcTry.c      **** 		
 187:adcTry.c      **** 		case 0b00011001: 
 188:adcTry.c      **** 
 189:adcTry.c      **** 		case 0b00011011: 	//some casses at nodes
 190:adcTry.c      **** 		
 191:adcTry.c      **** 		case 0b00010111: 	//bad casses
 192:adcTry.c      **** 		case 0b00011101: 
 193:adcTry.c      **** 		
 194:adcTry.c      **** 		case 0b00001011: 	//very bad casses
 195:adcTry.c      **** 		case 0b00011010: 
 196:adcTry.c      **** 		
 197:adcTry.c      **** 		case 0b00010010:
 198:adcTry.c      **** 		case 0b00001001:
 199:adcTry.c      **** 		
 200:adcTry.c      **** 		 
 201:adcTry.c      **** 		case 0b00010001: 
 202:adcTry.c      **** 		
 203:adcTry.c      **** 		
 204:adcTry.c      **** 		
 205:adcTry.c      **** 		
 206:adcTry.c      **** 		
 207:adcTry.c      **** 		
 208:adcTry.c      **** 			M_OUTPUT=0b01001;
 357               	.LM41:
 358 011a 89E0      		ldi r24,lo8(9)
 359 011c 82BB      		out 50-0x20,r24
 209:adcTry.c      **** 			OCR1A=(MASTER_PWM*50/100); 
 361               	.LM42:
 362 011e 2091 0000 		lds r18,MASTER_PWM
 363 0122 3327      		clr r19
 364 0124 C901      		movw r24,r18
 365 0126 62E0      		ldi r22,lo8(2)
 366 0128 70E0      		ldi r23,hi8(2)
 367 012a 00D0      		rcall __divmodhi4
 368 012c 7BBD      		out (74)+1-0x20,r23
 369 012e 6ABD      		out 74-0x20,r22
 210:adcTry.c      **** 			OCR1B=(MASTER_PWM*80/100);
 371               	.LM43:
 372 0130 80E5      		ldi r24,lo8(80)
 373 0132 90E0      		ldi r25,hi8(80)
 374               	.L32:
 375 0134 BC01      		movw r22,r24
 376 0136 269F      		mul r18,r22
 377 0138 C001      		movw r24,r0
 378 013a 279F      		mul r18,r23
 379 013c 900D      		add r25,r0
 380 013e 369F      		mul r19,r22
 381 0140 900D      		add r25,r0
 382 0142 1124      		clr r1
 383 0144 64E6      		ldi r22,lo8(100)
 384 0146 70E0      		ldi r23,hi8(100)
 385 0148 00C0      		rjmp .L31
 386               	.L20:
 211:adcTry.c      **** 			break;
 212:adcTry.c      **** 
 213:adcTry.c      **** 
 214:adcTry.c      **** 		case 0b00011100: // sharp left with at slower speed       
 215:adcTry.c      **** 	//	case 0b00011110:
 216:adcTry.c      **** 		                           
 217:adcTry.c      **** 			M_OUTPUT=0b110;
 388               	.LM44:
 389 014a 86E0      		ldi r24,lo8(6)
 390 014c 82BB      		out 50-0x20,r24
 218:adcTry.c      **** 			OCR1A=(MASTER_PWM*70/100); 
 392               	.LM45:
 393 014e 2091 0000 		lds r18,MASTER_PWM
 394 0152 3327      		clr r19
 395 0154 86E4      		ldi r24,lo8(70)
 396 0156 90E0      		ldi r25,hi8(70)
 397 0158 BC01      		movw r22,r24
 398 015a 269F      		mul r18,r22
 399 015c C001      		movw r24,r0
 400 015e 279F      		mul r18,r23
 401 0160 900D      		add r25,r0
 402 0162 369F      		mul r19,r22
 403 0164 900D      		add r25,r0
 404 0166 1124      		clr r1
 405 0168 64E6      		ldi r22,lo8(100)
 406 016a 70E0      		ldi r23,hi8(100)
 407 016c 00D0      		rcall __divmodhi4
 408 016e 7BBD      		out (74)+1-0x20,r23
 409 0170 6ABD      		out 74-0x20,r22
 219:adcTry.c      **** 			OCR1B=(MASTER_PWM*50/100);
 411               	.LM46:
 412 0172 C901      		movw r24,r18
 413 0174 62E0      		ldi r22,lo8(2)
 414 0176 70E0      		ldi r23,hi8(2)
 415               	.L31:
 416 0178 00D0      		rcall __divmodhi4
 417               	.L29:
 418 017a 79BD      		out (72)+1-0x20,r23
 419 017c 68BD      		out 72-0x20,r22
 420 017e 00C0      		rjmp .L9
 421               	/* epilogue: frame size=0 */
 422               	/* epilogue: noreturn */
 423               	/* epilogue end (size=0) */
 424               	/* function main size 211 (207) */
 431               	.Lscope2:
 432               		.comm MASTER_PWM,1,1
 435               	.Letext0:
 436               	/* File "adcTry.c": code  225 = 0x00e1 ( 220), prologues   4, epilogues   1 */
DEFINED SYMBOLS
                            *ABS*:00000000 adcTry.c
     /tmp/ccGVwRSe.s:2      *ABS*:0000003f __SREG__
     /tmp/ccGVwRSe.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccGVwRSe.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccGVwRSe.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccGVwRSe.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccGVwRSe.s:70     .text:00000000 calc
     /tmp/ccGVwRSe.s:119    .text:0000001c main
                            *COM*:00000001 MASTER_PWM

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__stack
__divmodhi4
