
lfr3sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  0000018a  000001fe  2**0
                  ALLOC
  3 .stab         00000db0  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007f7  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	2a c0       	rjmp	.+84     	; 0x6c <__bad_interrupt>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	a4 c0       	rjmp	.+328    	; 0x170 <main+0xe8>
  28:	91 c0       	rjmp	.+290    	; 0x14c <main+0xc4>
  2a:	8c c0       	rjmp	.+280    	; 0x144 <main+0xbc>
  2c:	9c c0       	rjmp	.+312    	; 0x166 <main+0xde>
  2e:	95 c0       	rjmp	.+298    	; 0x15a <main+0xd2>
  30:	9f c0       	rjmp	.+318    	; 0x170 <main+0xe8>
  32:	a1 c0       	rjmp	.+322    	; 0x176 <main+0xee>
  34:	9d c0       	rjmp	.+314    	; 0x170 <main+0xe8>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e8 e8       	ldi	r30, 0x88	; 136
  4a:	f1 e0       	ldi	r31, 0x01	; 1
  4c:	02 c0       	rjmp	.+4      	; 0x52 <.do_copy_data_start>

0000004e <.do_copy_data_loop>:
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0

00000052 <.do_copy_data_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <.do_copy_data_loop>

00000058 <__do_clear_bss>:
  58:	10 e0       	ldi	r17, 0x00	; 0
  5a:	a2 e6       	ldi	r26, 0x62	; 98
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	ac 36       	cpi	r26, 0x6C	; 108
  64:	b1 07       	cpc	r27, r17
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	0f d0       	rcall	.+30     	; 0x88 <main>
  6a:	8c c0       	rjmp	.+280    	; 0x184 <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__heap_end>

0000006e <calc>:
	uint8_t Actual_input,LAST_INPUT=0,SENSOR_INPUTS,sensorReference0,sensorReference1,sensorReference2;

uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
  6e:	97 b1       	in	r25, 0x07	; 7
  70:	90 7f       	andi	r25, 0xF0	; 240
  72:	97 b9       	out	0x07, r25	; 7
	ADMUX|=w;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	98 2b       	or	r25, r24
  78:	97 b9       	out	0x07, r25	; 7
	ADCSRA|=_BV(ADEN);
  7a:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
  7c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
  7e:	34 9b       	sbis	0x06, 4	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <calc+0x10>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
  82:	16 b8       	out	0x06, r1	; 6
	return ADCH;
  84:	85 b1       	in	r24, 0x05	; 5


	//	return 0x0;		//change here
	}
  86:	08 95       	ret

00000088 <main>:


int main()
{
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
			//uint8_t Actual_input,Check_input,LAST_INPUT=0;	
			//DDRC=0b11000000; 
			/* DDR=Data Direction register... its to define PD0(pin2),PD1(pin3),PD2(pin4) as input pin
			rest bits of DDRD can be 0 or 1 does not make any significance */
			DDRD=0b00001111;  
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	81 bb       	out	0x11, r24	; 17
			DDRB=0x0f;
  92:	87 bb       	out	0x17, r24	; 23
			PORTB=0xf0;
  94:	80 ef       	ldi	r24, 0xF0	; 240
  96:	88 bb       	out	0x18, r24	; 24
			DDRC=0x00;  
  98:	14 ba       	out	0x14, r1	; 20
			PB2(OC1B) o/p for left motor	(connected to positive pin of left motor)
			PB0  o/p for right motor Ground (its change in program )	(connected to negative pin of right motor)
			PB3  o/p for left motor Ground (its change in program )	(connected to negative pin of leftt motor)
			*/
			
		ADCSRA&=~(1<<ADIF);  		// to disable the adc interrupt flag....
  9a:	34 98       	cbi	0x06, 4	; 6
		ADMUX |= (1 << REFS0); 		// set the voltage reference as AVcc 
  9c:	3e 9a       	sbi	0x07, 6	; 7
		ADMUX|=_BV(ADLAR);			// left adjusted Result
  9e:	3d 9a       	sbi	0x07, 5	; 7
		
		ADCSRA|=(_BV(ADPS0) | _BV(ADPS1) );  // set the ADC input frequency at 125 Khz(Prescaling of 8)
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	86 b9       	out	0x06, r24	; 6
	
		OCR1A=0x00ff;   // output compare register  for right motor  
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
		OCR1B=0x00ff;	// output compare register  for left motor
  ae:	99 bd       	out	0x29, r25	; 41
  b0:	88 bd       	out	0x28, r24	; 40
		
		/* TOP value is 00FFh for both OC1A and OC1B*/
		TCCR1A=0xA1;	// define type of PWM	
  b2:	81 ea       	ldi	r24, 0xA1	; 161
  b4:	8f bd       	out	0x2f, r24	; 47
		/*Timer/Counter 1 Control  and pwm at pin OC1A(PB1) */
		TCCR1B=0x01; //for start pwm
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8e bd       	out	0x2e, r24	; 46
		
		/* pwm at pin OC1B(PB2) and clock freq. of timer(3 LSB 000 sys. clock) */ 
			/*maximum MASTER_PWM value can be 00FFh */
		//MASTER_PWM=230;
		PERCENTAGE_LEFT_PWM=100;
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	80 93 69 00 	sts	0x0069, r24
		PERCENTAGE_RIGHT_PWM=100;
  c0:	80 93 68 00 	sts	0x0068, r24
  c4:	90 91 63 00 	lds	r25, 0x0063
			OCR1B=(MASTER_PWM*80/100);	 // enable for left
			LED_OFF;
			break;
		//case 0b01000:                                   
		case 0b110:	// sharp left with at slower speed
			M_OUTPUT=FORWARD;	//	output for motors
  c8:	49 e0       	ldi	r20, 0x09	; 9
			OCR1A=(MASTER_PWM*80/100);   // enable for right
  ca:	2c e3       	ldi	r18, 0x3C	; 60
  cc:	30 e0       	ldi	r19, 0x00	; 0
			OCR1B=(MASTER_PWM*60/100);	 // enable for left
  ce:	cd e2       	ldi	r28, 0x2D	; 45
  d0:	d0 e0       	ldi	r29, 0x00	; 0
			
			break;
		case 0b100:// sharp left
		//case 0b11000:
		//case 0b11100:
			M_OUTPUT=RIGHT;
  d2:	1a e0       	ldi	r17, 0x0A	; 10
			OCR1A=(MASTER_PWM*50/100); 
  d4:	a5 e2       	ldi	r26, 0x25	; 37
  d6:	b0 e0       	ldi	r27, 0x00	; 0
			OCR1B=(MASTER_PWM*70/100);
  d8:	64 e3       	ldi	r22, 0x34	; 52
  da:	70 e0       	ldi	r23, 0x00	; 0
            		break; 
		case 0b001: // sharp right 
		//case 0b011:
		//case 0b111:
			LED_OFF;
			M_OUTPUT=LEFT;				
  dc:	55 e0       	ldi	r21, 0x05	; 5
	uint8_t Actual_input,LAST_INPUT=0,SENSOR_INPUTS,sensorReference0,sensorReference1,sensorReference2;

uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	87 b9       	out	0x07, r24	; 7
	ADMUX|=w;
  e4:	87 b1       	in	r24, 0x07	; 7
  e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=_BV(ADEN);
  e8:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
  ea:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
  ec:	34 9b       	sbis	0x06, 4	; 6
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x64>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
  f0:	16 b8       	out	0x06, r1	; 6
	return ADCH;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	85 36       	cpi	r24, 0x65	; 101
  f8:	08 f0       	brcs	.+2      	; 0xfc <main+0x74>
  fa:	e1 e0       	ldi	r30, 0x01	; 1
	uint8_t Actual_input,LAST_INPUT=0,SENSOR_INPUTS,sensorReference0,sensorReference1,sensorReference2;

uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	87 b9       	out	0x07, r24	; 7
	ADMUX|=w;
 102:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA|=_BV(ADEN);
 104:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
 106:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
 108:	34 9b       	sbis	0x06, 4	; 6
 10a:	fe cf       	rjmp	.-4      	; 0x108 <main+0x80>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
 10c:	16 b8       	out	0x06, r1	; 6
	return ADCH;
 10e:	85 b1       	in	r24, 0x05	; 5
		//sensorReference4=128;
		
		Actual_input=0x0;
		if(calc(0)>sensorReference0)		//check
			Actual_input|=(1<<PC0);
		if(calc(1)>sensorReference1)
 110:	85 36       	cpi	r24, 0x65	; 101
 112:	08 f0       	brcs	.+2      	; 0x116 <main+0x8e>
			Actual_input|=(1<<PC1);
 114:	e2 60       	ori	r30, 0x02	; 2
	uint8_t Actual_input,LAST_INPUT=0,SENSOR_INPUTS,sensorReference0,sensorReference1,sensorReference2;

uint8_t calc(uint8_t w)
	{
		//put adc code here...
	ADMUX&=0xF0;
 116:	87 b1       	in	r24, 0x07	; 7
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	87 b9       	out	0x07, r24	; 7
	ADMUX|=w;
 11c:	39 9a       	sbi	0x07, 1	; 7
	ADCSRA|=_BV(ADEN);
 11e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA|= (1<<ADSC);
 120:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));//ADIF is set.will come out of loop 
 122:	34 9b       	sbis	0x06, 4	; 6
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x9a>
	ADCSRA=(0<<ADEN);// added by me to switc off the adc , so as it doesnt consume power
 126:	16 b8       	out	0x06, r1	; 6
	return ADCH;
 128:	85 b1       	in	r24, 0x05	; 5
		Actual_input=0x0;
		if(calc(0)>sensorReference0)		//check
			Actual_input|=(1<<PC0);
		if(calc(1)>sensorReference1)
			Actual_input|=(1<<PC1);
		if(calc(2)>sensorReference2)
 12a:	85 36       	cpi	r24, 0x65	; 101
 12c:	08 f0       	brcs	.+2      	; 0x130 <main+0xa8>
			Actual_input|=(1<<PC2);
 12e:	e4 60       	ori	r30, 0x04	; 4
		if(calc(4)>sensorReference4)
			Actual_input|=(1<<PC4);
		*/
		
		
		Actual_input = (~Actual_input) & 0b111;  // make bits zero other than 4 LSB bits
 130:	8e 2f       	mov	r24, r30
 132:	80 95       	com	r24
 134:	87 70       	andi	r24, 0x07	; 7
			//PORTD=Actual_input;
			//goto line_following;
		//*/
		//Actual_input=(0b111)&SENSOR_INPUTS;	
	
		if(LAST_INPUT==Actual_input)goto line_following;
 136:	98 17       	cp	r25, r24
 138:	91 f2       	breq	.-92     	; 0xde <main+0x56>
		if(LAST_INPUT==Actual_input)goto line_following;
		*/
		
		
	
	switch(Actual_input)
 13a:	e8 2f       	mov	r30, r24
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ed 5e       	subi	r30, 0xED	; 237
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	09 94       	ijmp
		// all the variables values we given here,depends on robot behavior on different conditions 
		// these values will differ robot to robot 
		//case 0b00000:
		//case 0b111:  
		case 0b010: // forward
            		M_OUTPUT=FORWARD;	//	output for motors
 144:	42 bb       	out	0x12, r20	; 18
			OCR1A=(MASTER_PWM*80/100);   // enable for right
 146:	3b bd       	out	0x2b, r19	; 43
 148:	2a bd       	out	0x2a, r18	; 42
 14a:	10 c0       	rjmp	.+32     	; 0x16c <main+0xe4>
			LED_OFF;
            		break; 
		case 0b001: // sharp right 
		//case 0b011:
		//case 0b111:
			LED_OFF;
 14c:	c0 9a       	sbi	0x18, 0	; 24
			M_OUTPUT=LEFT;				
 14e:	52 bb       	out	0x12, r21	; 18
			OCR1A=(MASTER_PWM*70/100);	 // enable for left
 150:	7b bd       	out	0x2b, r23	; 43
 152:	6a bd       	out	0x2a, r22	; 42
			OCR1B=(MASTER_PWM*50/100);
 154:	b9 bd       	out	0x29, r27	; 41
 156:	a8 bd       	out	0x28, r26	; 40
 158:	0c c0       	rjmp	.+24     	; 0x172 <main+0xea>
			
			break;
		case 0b100:// sharp left
		//case 0b11000:
		//case 0b11100:
			M_OUTPUT=RIGHT;
 15a:	12 bb       	out	0x12, r17	; 18
			OCR1A=(MASTER_PWM*50/100); 
 15c:	bb bd       	out	0x2b, r27	; 43
 15e:	aa bd       	out	0x2a, r26	; 42
			OCR1B=(MASTER_PWM*70/100);
 160:	79 bd       	out	0x29, r23	; 41
 162:	68 bd       	out	0x28, r22	; 40
 164:	05 c0       	rjmp	.+10     	; 0x170 <main+0xe8>
			LED_OFF;
			break;				
		//case 0b010: 
		case 0b011: 	// sharp right with at slower speed    
			M_OUTPUT=FORWARD;	//	output for motors
 166:	42 bb       	out	0x12, r20	; 18
			OCR1A=(MASTER_PWM*60/100);   // enable for right
 168:	db bd       	out	0x2b, r29	; 43
 16a:	ca bd       	out	0x2a, r28	; 42
			OCR1B=(MASTER_PWM*80/100);	 // enable for left
 16c:	39 bd       	out	0x29, r19	; 41
 16e:	28 bd       	out	0x28, r18	; 40
			LED_OFF;
 170:	c0 9a       	sbi	0x18, 0	; 24
 172:	98 2f       	mov	r25, r24
 174:	b4 cf       	rjmp	.-152    	; 0xde <main+0x56>
			break;
		//case 0b01000:                                   
		case 0b110:	// sharp left with at slower speed
			M_OUTPUT=FORWARD;	//	output for motors
 176:	42 bb       	out	0x12, r20	; 18
			OCR1A=(MASTER_PWM*80/100);   // enable for right
 178:	3b bd       	out	0x2b, r19	; 43
 17a:	2a bd       	out	0x2a, r18	; 42
			OCR1B=(MASTER_PWM*60/100);	 // enable for left
 17c:	d9 bd       	out	0x29, r29	; 41
 17e:	c8 bd       	out	0x28, r28	; 40
			LED_ON;
 180:	c0 98       	cbi	0x18, 0	; 24
 182:	f7 cf       	rjmp	.-18     	; 0x172 <main+0xea>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
